
Lab1_Counting_People_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004568  08004568  00005568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045fc  080045fc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000055fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004604  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000060  08004664  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004664  00006340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b384  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  0001140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00012fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d2  00000000  00000000  00013c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001788f  00000000  00000000  00014602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8bc  00000000  00000000  0002be91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0ae  00000000  00000000  0003a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c47fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000c4840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000c8360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004550 	.word	0x08004550

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004550 	.word	0x08004550

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f023 030f 	bic.w	r3, r3, #15
 8000960:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	f043 030c 	orr.w	r3, r3, #12
 800096e:	b2db      	uxtb	r3, r3
 8000970:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	b2db      	uxtb	r3, r3
 800097a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	f043 030c 	orr.w	r3, r3, #12
 8000982:	b2db      	uxtb	r3, r3
 8000984:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000990:	f107 0208 	add.w	r2, r7, #8
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	214e      	movs	r1, #78	@ 0x4e
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <lcd_send_cmd+0x5c>)
 800099e:	f001 fabd 	bl	8001f1c <HAL_I2C_Master_Transmit>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000007c 	.word	0x2000007c

080009b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f023 030f 	bic.w	r3, r3, #15
 80009c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f043 030d 	orr.w	r3, r3, #13
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f043 0309 	orr.w	r3, r3, #9
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	f043 030d 	orr.w	r3, r3, #13
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	f043 0309 	orr.w	r3, r3, #9
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009f0:	f107 0208 	add.w	r2, r7, #8
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2304      	movs	r3, #4
 80009fa:	214e      	movs	r1, #78	@ 0x4e
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <lcd_send_data+0x5c>)
 80009fe:	f001 fa8d 	bl	8001f1c <HAL_I2C_Master_Transmit>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000007c 	.word	0x2000007c

08000a10 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <lcd_put_cur+0x18>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d005      	beq.n	8000a32 <lcd_put_cur+0x22>
 8000a26:	e009      	b.n	8000a3c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2e:	603b      	str	r3, [r7, #0]
            break;
 8000a30:	e004      	b.n	8000a3c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000a38:	603b      	str	r3, [r7, #0]
            break;
 8000a3a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff85 	bl	8000950 <lcd_send_cmd>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <lcd_init>:


void lcd_init (void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a52:	2032      	movs	r0, #50	@ 0x32
 8000a54:	f000 fe50 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a58:	2030      	movs	r0, #48	@ 0x30
 8000a5a:	f7ff ff79 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f000 fe4a 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a64:	2030      	movs	r0, #48	@ 0x30
 8000a66:	f7ff ff73 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fe44 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a70:	2030      	movs	r0, #48	@ 0x30
 8000a72:	f7ff ff6d 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(10);
 8000a76:	200a      	movs	r0, #10
 8000a78:	f000 fe3e 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a7c:	2020      	movs	r0, #32
 8000a7e:	f7ff ff67 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f000 fe38 	bl	80016f8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a88:	2028      	movs	r0, #40	@ 0x28
 8000a8a:	f7ff ff61 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fe32 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a94:	2008      	movs	r0, #8
 8000a96:	f7ff ff5b 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fe2c 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff ff55 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fe26 	bl	80016f8 <HAL_Delay>
	HAL_Delay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 fe23 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f7ff ff4c 	bl	8000950 <lcd_send_cmd>
	HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 fe1d 	bl	80016f8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000abe:	200c      	movs	r0, #12
 8000ac0:	f7ff ff46 	bl	8000950 <lcd_send_cmd>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ad0:	e006      	b.n	8000ae0 <lcd_send_string+0x18>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff68 	bl	80009b0 <lcd_send_data>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <lcd_send_string+0xa>
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <delay>:
#define TRIG_PIN_2 GPIO_PIN_9
#define TRIG_PORT_2 GPIOA



void delay (uint16_t time){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <delay+0x2c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000b06:	bf00      	nop
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <delay+0x2c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3f9      	bcc.n	8000b08 <delay+0x14>
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200000d0 	.word	0x200000d0
 8000b24:	00000000 	.word	0x00000000

08000b28 <HAL_TIM_IC_CaptureCallback>:



// Callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // if the interrupt source is channel1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a7c      	ldr	r2, [pc, #496]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d174      	bne.n	8000c24 <HAL_TIM_IC_CaptureCallback+0xfc>
    {
        if (Is_First_Captured_1 == 0)
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11a      	bne.n	8000b78 <HAL_TIM_IC_CaptureCallback+0x50>
        {// if the first value is not captured
            IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000b42:	2100      	movs	r1, #0
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f002 fd45 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a78      	ldr	r2, [pc, #480]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000b4e:	6013      	str	r3, [r2, #0]
            Is_First_Captured_1 = 1;// set the first captured as true
 8000b50:	4b76      	ldr	r3, [pc, #472]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]

			// Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6a1a      	ldr	r2, [r3, #32]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 020a 	bic.w	r2, r2, #10
 8000b64:	621a      	str	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a1a      	ldr	r2, [r3, #32]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f042 0202 	orr.w	r2, r2, #2
 8000b74:	621a      	str	r2, [r3, #32]
 8000b76:	e055      	b.n	8000c24 <HAL_TIM_IC_CaptureCallback+0xfc>
        } else {
            IC_Val2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f002 fd2a 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a6c      	ldr	r2, [pc, #432]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000b84:	6013      	str	r3, [r2, #0]

            if (IC_Val2_1 > IC_Val1_1) {
 8000b86:	4b6b      	ldr	r3, [pc, #428]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b69      	ldr	r3, [pc, #420]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <HAL_TIM_IC_CaptureCallback+0x7a>
                Difference_1 = IC_Val2_1 - IC_Val1_1;
 8000b92:	4b68      	ldr	r3, [pc, #416]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b66      	ldr	r3, [pc, #408]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4a66      	ldr	r2, [pc, #408]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e009      	b.n	8000bb6 <HAL_TIM_IC_CaptureCallback+0x8e>
            }else
            {
                Difference_1 = (0xffff - IC_Val1_1) + IC_Val2_1;
 8000ba2:	4b64      	ldr	r3, [pc, #400]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b62      	ldr	r3, [pc, #392]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000bb0:	33ff      	adds	r3, #255	@ 0xff
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000bb4:	6013      	str	r3, [r2, #0]
            }

            Distance_1 = Difference_1 * 0.032 / 2;
 8000bb6:	4b60      	ldr	r3, [pc, #384]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc1c 	bl	80003f8 <__aeabi_ui2d>
 8000bc0:	a357      	add	r3, pc, #348	@ (adr r3, 8000d20 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc6:	f7ff fc91 	bl	80004ec <__aeabi_dmul>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bda:	f7ff fdb1 	bl	8000740 <__aeabi_ddiv>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	4610      	mov	r0, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff fe93 	bl	8000910 <__aeabi_d2uiz>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b53      	ldr	r3, [pc, #332]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x214>)
 8000bf0:	701a      	strb	r2, [r3, #0]
            Is_First_Captured_1 = 0; //set it back to call
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]

            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a1a      	ldr	r2, [r3, #32]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 020a 	bic.w	r2, r2, #10
 8000c06:	621a      	str	r2, [r3, #32]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a12      	ldr	r2, [r2, #32]
 8000c12:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000c14:	4b4a      	ldr	r3, [pc, #296]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	4b49      	ldr	r3, [pc, #292]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0202 	bic.w	r2, r2, #2
 8000c22:	60da      	str	r2, [r3, #12]
        }
    }

    if (htim->Instance == TIM2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2c:	d174      	bne.n	8000d18 <HAL_TIM_IC_CaptureCallback+0x1f0>
    {  // TIM2
        if (Is_First_Captured_2 == 0)
 8000c2e:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11a      	bne.n	8000c6c <HAL_TIM_IC_CaptureCallback+0x144>
        {
            IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000c36:	2100      	movs	r1, #0
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f002 fccb 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a41      	ldr	r2, [pc, #260]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000c42:	6013      	str	r3, [r2, #0]
            Is_First_Captured_2 = 1; // set the first captured as true
 8000c44:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]

            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6a1a      	ldr	r2, [r3, #32]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 020a 	bic.w	r2, r2, #10
 8000c58:	621a      	str	r2, [r3, #32]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6a1a      	ldr	r2, [r3, #32]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0202 	orr.w	r2, r2, #2
 8000c68:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
        }
    }
}
 8000c6a:	e055      	b.n	8000d18 <HAL_TIM_IC_CaptureCallback+0x1f0>
            IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f002 fcb0 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a35      	ldr	r2, [pc, #212]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8000c78:	6013      	str	r3, [r2, #0]
            if (IC_Val2_2 > IC_Val1_2) {
 8000c7a:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d907      	bls.n	8000c96 <HAL_TIM_IC_CaptureCallback+0x16e>
                Difference_2 = IC_Val2_2 - IC_Val1_2;
 8000c86:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	4a2f      	ldr	r2, [pc, #188]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e009      	b.n	8000caa <HAL_TIM_IC_CaptureCallback+0x182>
                Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8000c96:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ca4:	33ff      	adds	r3, #255	@ 0xff
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000ca8:	6013      	str	r3, [r2, #0]
            Distance_2 = Difference_2 * 0.032 / 2;
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fba2 	bl	80003f8 <__aeabi_ui2d>
 8000cb4:	a31a      	add	r3, pc, #104	@ (adr r3, 8000d20 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	f7ff fc17 	bl	80004ec <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cce:	f7ff fd37 	bl	8000740 <__aeabi_ddiv>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff fe19 	bl	8000910 <__aeabi_d2uiz>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000ce4:	701a      	strb	r2, [r3, #0]
            Is_First_Captured_2 = 0;//set it back to call
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 020a 	bic.w	r2, r2, #10
 8000cfa:	621a      	str	r2, [r3, #32]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a12      	ldr	r2, [r2, #32]
 8000d06:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0202 	bic.w	r2, r2, #2
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d24:	3fa0624d 	.word	0x3fa0624d
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	20000178 	.word	0x20000178
 8000d30:	2000016c 	.word	0x2000016c
 8000d34:	20000170 	.word	0x20000170
 8000d38:	20000174 	.word	0x20000174
 8000d3c:	20000179 	.word	0x20000179
 8000d40:	200000d0 	.word	0x200000d0
 8000d44:	20000188 	.word	0x20000188
 8000d48:	2000017c 	.word	0x2000017c
 8000d4c:	20000180 	.word	0x20000180
 8000d50:	20000184 	.word	0x20000184
 8000d54:	20000189 	.word	0x20000189
 8000d58:	20000118 	.word	0x20000118

08000d5c <CheckRoomState>:
////        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);  // Bật LED nếu có ngư�?i
////    }
//}


void CheckRoomState(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    if (Distance_1 < outdist && wait_queue[0] != '1') {
 8000d60:	4b49      	ldr	r3, [pc, #292]	@ (8000e88 <CheckRoomState+0x12c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b49      	ldr	r3, [pc, #292]	@ (8000e8c <CheckRoomState+0x130>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d212      	bcs.n	8000d94 <CheckRoomState+0x38>
 8000d6e:	4b48      	ldr	r3, [pc, #288]	@ (8000e90 <CheckRoomState+0x134>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b31      	cmp	r3, #49	@ 0x31
 8000d74:	d00e      	beq.n	8000d94 <CheckRoomState+0x38>
        wait_queue[strlen(wait_queue)] = '1'; // Append '1'
 8000d76:	4846      	ldr	r0, [pc, #280]	@ (8000e90 <CheckRoomState+0x134>)
 8000d78:	f7ff f9f4 	bl	8000164 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a44      	ldr	r2, [pc, #272]	@ (8000e90 <CheckRoomState+0x134>)
 8000d80:	2131      	movs	r1, #49	@ 0x31
 8000d82:	54d1      	strb	r1, [r2, r3]
        wait_queue[strlen(wait_queue)] = '\0'; // Null-terminate
 8000d84:	4842      	ldr	r0, [pc, #264]	@ (8000e90 <CheckRoomState+0x134>)
 8000d86:	f7ff f9ed 	bl	8000164 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <CheckRoomState+0x134>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	54d1      	strb	r1, [r2, r3]
 8000d92:	e018      	b.n	8000dc6 <CheckRoomState+0x6a>
    } else if (Distance_2 < outdist && wait_queue[0] != '2') {
 8000d94:	4b3f      	ldr	r3, [pc, #252]	@ (8000e94 <CheckRoomState+0x138>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e8c <CheckRoomState+0x130>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d211      	bcs.n	8000dc6 <CheckRoomState+0x6a>
 8000da2:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <CheckRoomState+0x134>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b32      	cmp	r3, #50	@ 0x32
 8000da8:	d00d      	beq.n	8000dc6 <CheckRoomState+0x6a>
        wait_queue[strlen(wait_queue)] = '2'; // Append '2'
 8000daa:	4839      	ldr	r0, [pc, #228]	@ (8000e90 <CheckRoomState+0x134>)
 8000dac:	f7ff f9da 	bl	8000164 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a37      	ldr	r2, [pc, #220]	@ (8000e90 <CheckRoomState+0x134>)
 8000db4:	2132      	movs	r1, #50	@ 0x32
 8000db6:	54d1      	strb	r1, [r2, r3]
        wait_queue[strlen(wait_queue)] = '\0'; // Null-terminate
 8000db8:	4835      	ldr	r0, [pc, #212]	@ (8000e90 <CheckRoomState+0x134>)
 8000dba:	f7ff f9d3 	bl	8000164 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a33      	ldr	r2, [pc, #204]	@ (8000e90 <CheckRoomState+0x134>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	54d1      	strb	r1, [r2, r3]
    }

    if (strcmp(wait_queue, "12") == 0) {
 8000dc6:	4934      	ldr	r1, [pc, #208]	@ (8000e98 <CheckRoomState+0x13c>)
 8000dc8:	4831      	ldr	r0, [pc, #196]	@ (8000e90 <CheckRoomState+0x134>)
 8000dca:	f7ff f9c1 	bl	8000150 <strcmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10e      	bne.n	8000df2 <CheckRoomState+0x96>
        npeople++;
 8000dd4:	4b31      	ldr	r3, [pc, #196]	@ (8000e9c <CheckRoomState+0x140>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a30      	ldr	r2, [pc, #192]	@ (8000e9c <CheckRoomState+0x140>)
 8000ddc:	6013      	str	r3, [r2, #0]
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000dde:	2203      	movs	r2, #3
 8000de0:	2100      	movs	r1, #0
 8000de2:	482b      	ldr	r0, [pc, #172]	@ (8000e90 <CheckRoomState+0x134>)
 8000de4:	f002 ff24 	bl	8003c30 <memset>
        HAL_Delay(550);
 8000de8:	f240 2026 	movw	r0, #550	@ 0x226
 8000dec:	f000 fc84 	bl	80016f8 <HAL_Delay>
 8000df0:	e018      	b.n	8000e24 <CheckRoomState+0xc8>
    } else if (strcmp(wait_queue, "21") == 0 && npeople > 0) {
 8000df2:	492b      	ldr	r1, [pc, #172]	@ (8000ea0 <CheckRoomState+0x144>)
 8000df4:	4826      	ldr	r0, [pc, #152]	@ (8000e90 <CheckRoomState+0x134>)
 8000df6:	f7ff f9ab 	bl	8000150 <strcmp>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d111      	bne.n	8000e24 <CheckRoomState+0xc8>
 8000e00:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <CheckRoomState+0x140>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <CheckRoomState+0xc8>
        npeople--;
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <CheckRoomState+0x140>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <CheckRoomState+0x140>)
 8000e10:	6013      	str	r3, [r2, #0]
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000e12:	2203      	movs	r2, #3
 8000e14:	2100      	movs	r1, #0
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <CheckRoomState+0x134>)
 8000e18:	f002 ff0a 	bl	8003c30 <memset>
        HAL_Delay(550);
 8000e1c:	f240 2026 	movw	r0, #550	@ 0x226
 8000e20:	f000 fc6a 	bl	80016f8 <HAL_Delay>
    }

    if (strlen(wait_queue) > 2 || strcmp(wait_queue, "11") == 0 || strcmp(wait_queue, "22") == 0 || timeoutcounter > 200) {
 8000e24:	481a      	ldr	r0, [pc, #104]	@ (8000e90 <CheckRoomState+0x134>)
 8000e26:	f7ff f99d 	bl	8000164 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d811      	bhi.n	8000e54 <CheckRoomState+0xf8>
 8000e30:	491c      	ldr	r1, [pc, #112]	@ (8000ea4 <CheckRoomState+0x148>)
 8000e32:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <CheckRoomState+0x134>)
 8000e34:	f7ff f98c 	bl	8000150 <strcmp>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00a      	beq.n	8000e54 <CheckRoomState+0xf8>
 8000e3e:	491a      	ldr	r1, [pc, #104]	@ (8000ea8 <CheckRoomState+0x14c>)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <CheckRoomState+0x134>)
 8000e42:	f7ff f985 	bl	8000150 <strcmp>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <CheckRoomState+0xf8>
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <CheckRoomState+0x150>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e52:	d908      	bls.n	8000e66 <CheckRoomState+0x10a>
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000e54:	2203      	movs	r2, #3
 8000e56:	2100      	movs	r1, #0
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <CheckRoomState+0x134>)
 8000e5a:	f002 fee9 	bl	8003c30 <memset>
        timeoutcounter = 0; // Reset timeout counter
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <CheckRoomState+0x150>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
            timeoutcounter++;
        } else {
            timeoutcounter = 0; // Reset if queue length is not 1
        }
    }
}
 8000e64:	e00e      	b.n	8000e84 <CheckRoomState+0x128>
        if (strlen(wait_queue) == 1) {
 8000e66:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <CheckRoomState+0x134>)
 8000e68:	f7ff f97c 	bl	8000164 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <CheckRoomState+0x122>
            timeoutcounter++;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <CheckRoomState+0x150>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <CheckRoomState+0x150>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	e002      	b.n	8000e84 <CheckRoomState+0x128>
            timeoutcounter = 0; // Reset if queue length is not 1
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <CheckRoomState+0x150>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000179 	.word	0x20000179
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000164 	.word	0x20000164
 8000e94:	20000189 	.word	0x20000189
 8000e98:	08004568 	.word	0x08004568
 8000e9c:	20000160 	.word	0x20000160
 8000ea0:	0800456c 	.word	0x0800456c
 8000ea4:	08004570 	.word	0x08004570
 8000ea8:	08004574 	.word	0x08004574
 8000eac:	20000168 	.word	0x20000168

08000eb0 <HCSR04_Read_1>:

void HCSR04_Read_1 (void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <HCSR04_Read_1+0x34>)
 8000eba:	f000 fed3 	bl	8001c64 <HAL_GPIO_WritePin>
    delay(10); // wait 10us
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f7ff fe18 	bl	8000af4 <delay>
    HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET); // pull the TRIG in LOW
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <HCSR04_Read_1+0x34>)
 8000eca:	f000 fecb 	bl	8001c64 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HCSR04_Read_1+0x38>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <HCSR04_Read_1+0x38>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0202 	orr.w	r2, r2, #2
 8000edc:	60da      	str	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	200000d0 	.word	0x200000d0

08000eec <HCSR04_Read_2>:

void HCSR04_Read_2 (void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <HCSR04_Read_2+0x38>)
 8000ef8:	f000 feb4 	bl	8001c64 <HAL_GPIO_WritePin>
    delay(10); // wait 10us
 8000efc:	200a      	movs	r0, #10
 8000efe:	f7ff fdf9 	bl	8000af4 <delay>
    HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET); // pull the TRIG in LOW
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <HCSR04_Read_2+0x38>)
 8000f0a:	f000 feab 	bl	8001c64 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HCSR04_Read_2+0x3c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <HCSR04_Read_2+0x3c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	60da      	str	r2, [r3, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800
 8000f28:	20000118 	.word	0x20000118

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fb80 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f848 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f99e 	bl	8001278 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f3c:	f000 f8b8 	bl	80010b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f40:	f000 f92a 	bl	8001198 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f44:	f000 f886 	bl	8001054 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000f48:	f7ff fd81 	bl	8000a4e <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <main+0x84>)
 8000f50:	f001 ffe0 	bl	8002f14 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f54:	2100      	movs	r1, #0
 8000f56:	4817      	ldr	r0, [pc, #92]	@ (8000fb4 <main+0x88>)
 8000f58:	f001 ffdc 	bl	8002f14 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read_1();
 8000f5c:	f7ff ffa8 	bl	8000eb0 <HCSR04_Read_1>
	  HCSR04_Read_2();
 8000f60:	f7ff ffc4 	bl	8000eec <HCSR04_Read_2>
	  HAL_Delay(200);
 8000f64:	20c8      	movs	r0, #200	@ 0xc8
 8000f66:	f000 fbc7 	bl	80016f8 <HAL_Delay>
	  CheckRoomState();
 8000f6a:	f7ff fef7 	bl	8000d5c <CheckRoomState>
	  lcd_put_cur(0, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fd4d 	bl	8000a10 <lcd_put_cur>
	  sprintf (lcdBuffer, "  ROOM 1  ");
 8000f76:	4910      	ldr	r1, [pc, #64]	@ (8000fb8 <main+0x8c>)
 8000f78:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <main+0x90>)
 8000f7a:	f002 fe39 	bl	8003bf0 <siprintf>
	  lcd_send_string(lcdBuffer);
 8000f7e:	480f      	ldr	r0, [pc, #60]	@ (8000fbc <main+0x90>)
 8000f80:	f7ff fda2 	bl	8000ac8 <lcd_send_string>
	  memset(lcdBuffer, '\0', 50);
 8000f84:	2232      	movs	r2, #50	@ 0x32
 8000f86:	2100      	movs	r1, #0
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <main+0x90>)
 8000f8a:	f002 fe51 	bl	8003c30 <memset>
	  lcd_put_cur(1, 0);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fd3d 	bl	8000a10 <lcd_put_cur>
	  sprintf (lcdBuffer, "People: %02d ", npeople);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <main+0x94>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <main+0x98>)
 8000f9e:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <main+0x90>)
 8000fa0:	f002 fe26 	bl	8003bf0 <siprintf>
	  lcd_send_string(lcdBuffer);
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <main+0x90>)
 8000fa6:	f7ff fd8f 	bl	8000ac8 <lcd_send_string>
  {
 8000faa:	bf00      	nop
 8000fac:	e7d6      	b.n	8000f5c <main+0x30>
 8000fae:	bf00      	nop
 8000fb0:	200000d0 	.word	0x200000d0
 8000fb4:	20000118 	.word	0x20000118
 8000fb8:	08004578 	.word	0x08004578
 8000fbc:	2000018c 	.word	0x2000018c
 8000fc0:	20000160 	.word	0x20000160
 8000fc4:	08004584 	.word	0x08004584

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	@ 0x40
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2228      	movs	r2, #40	@ 0x28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fe2a 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001000:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001006:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fadb 	bl	80025cc <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800101c:	f000 f978 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fd48 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001046:	f000 f963 	bl	8001310 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3740      	adds	r7, #64	@ 0x40
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_I2C1_Init+0x50>)
 800105a:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <MX_I2C1_Init+0x54>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001060:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x58>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001076:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_I2C1_Init+0x50>)
 8001092:	f000 fdff 	bl	8001c94 <HAL_I2C_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800109c:	f000 f938 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000007c 	.word	0x2000007c
 80010a8:	40005400 	.word	0x40005400
 80010ac:	000186a0 	.word	0x000186a0

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001194 <MX_TIM1_Init+0xe4>)
 80010de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010e2:	2247      	movs	r2, #71	@ 0x47
 80010e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <MX_TIM1_Init+0xe0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001106:	4822      	ldr	r0, [pc, #136]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001108:	f001 fe5c 	bl	8002dc4 <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001112:	f000 f8fd 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001124:	f002 f98e 	bl	8003444 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800112e:	f000 f8ef 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001132:	4817      	ldr	r0, [pc, #92]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001134:	f001 fe95 	bl	8002e62 <HAL_TIM_IC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800113e:	f000 f8e7 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	480f      	ldr	r0, [pc, #60]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001152:	f002 fcdd 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800115c:	f000 f8d8 	bl	8001310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_TIM1_Init+0xe0>)
 8001178:	f002 f8c8 	bl	800330c <HAL_TIM_IC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001182:	f000 f8c5 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000d0 	.word	0x200000d0
 8001194:	40012c00 	.word	0x40012c00

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011cc:	2247      	movs	r2, #71	@ 0x47
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011d6:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ea:	4822      	ldr	r0, [pc, #136]	@ (8001274 <MX_TIM2_Init+0xdc>)
 80011ec:	f001 fdea 	bl	8002dc4 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80011f6:	f000 f88b 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4619      	mov	r1, r3
 8001206:	481b      	ldr	r0, [pc, #108]	@ (8001274 <MX_TIM2_Init+0xdc>)
 8001208:	f002 f91c 	bl	8003444 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001212:	f000 f87d 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001216:	4817      	ldr	r0, [pc, #92]	@ (8001274 <MX_TIM2_Init+0xdc>)
 8001218:	f001 fe23 	bl	8002e62 <HAL_TIM_IC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001222:	f000 f875 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480f      	ldr	r0, [pc, #60]	@ (8001274 <MX_TIM2_Init+0xdc>)
 8001236:	f002 fc6b 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001240:	f000 f866 	bl	8001310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_TIM2_Init+0xdc>)
 800125c:	f002 f856 	bl	800330c <HAL_TIM_IC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001266:	f000 f853 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000118 	.word	0x20000118

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_GPIO_Init+0x90>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <MX_GPIO_Init+0x90>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_GPIO_Init+0x90>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_GPIO_Init+0x90>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f240 2102 	movw	r1, #514	@ 0x202
 80012da:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_GPIO_Init+0x94>)
 80012dc:	f000 fcc2 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 80012e0:	f240 2302 	movw	r3, #514	@ 0x202
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_GPIO_Init+0x94>)
 80012fa:	f000 fb2f 	bl	800195c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40010800 	.word	0x40010800

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <Error_Handler+0x8>

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <HAL_MspInit+0x5c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_MspInit+0x5c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_MspInit+0x60>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_MspInit+0x60>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000

08001380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <HAL_I2C_MspInit+0x70>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d123      	bne.n	80013e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b8:	23c0      	movs	r3, #192	@ 0xc0
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <HAL_I2C_MspInit+0x78>)
 80013cc:	f000 fac6 	bl	800195c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013da:	61d3      	str	r3, [r2, #28]
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010c00 	.word	0x40010c00

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a33      	ldr	r2, [pc, #204]	@ (80014e4 <HAL_TIM_Base_MspInit+0xe8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d12d      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141c:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a31      	ldr	r2, [pc, #196]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001422:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a2b      	ldr	r2, [pc, #172]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800144c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4619      	mov	r1, r3
 8001460:	4822      	ldr	r0, [pc, #136]	@ (80014ec <HAL_TIM_Base_MspInit+0xf0>)
 8001462:	f000 fa7b 	bl	800195c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201b      	movs	r0, #27
 800146c:	f000 fa3f 	bl	80018ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001470:	201b      	movs	r0, #27
 8001472:	f000 fa58 	bl	8001926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001476:	e030      	b.n	80014da <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001480:	d12b      	bne.n	80014da <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6193      	str	r3, [r2, #24]
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_TIM_Base_MspInit+0xec>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <HAL_TIM_Base_MspInit+0xf0>)
 80014c6:	f000 fa49 	bl	800195c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f000 fa0d 	bl	80018ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f000 fa26 	bl	8001926 <HAL_NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40012c00 	.word	0x40012c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <NMI_Handler+0x4>

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <UsageFault_Handler+0x4>

08001518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f8be 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM1_CC_IRQHandler+0x10>)
 800154e:	f001 fded 	bl	800312c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200000d0 	.word	0x200000d0

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f001 fde3 	bl	800312c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000118 	.word	0x20000118

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f002 fb4e 	bl	8003c40 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20005000 	.word	0x20005000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200001f0 	.word	0x200001f0
 80015d8:	20000340 	.word	0x20000340

080015dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff fff8 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	@ (800161c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ee:	490c      	ldr	r1, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001604:	4c09      	ldr	r4, [pc, #36]	@ (800162c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f002 fb1b 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001616:	f7ff fc89 	bl	8000f2c <main>
  bx lr
 800161a:	4770      	bx	lr
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001624:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8001628:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800162c:	20000340 	.word	0x20000340

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f947 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fe64 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f95f 	bl	8001942 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f927 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000004 	.word	0x20000004
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a03      	ldr	r2, [pc, #12]	@ (80016e0 <HAL_IncTick+0x20>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	200001f4 	.word	0x200001f4

080016e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	@ (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	200001f4 	.word	0x200001f4

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff0 	bl	80016e4 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffe0 	bl	80016e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000000c 	.word	0x2000000c

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4906      	ldr	r1, [pc, #24]	@ (80017d8 <__NVIC_EnableIRQ+0x34>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff90 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff2d 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff42 	bl	8001788 <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff90 	bl	8001830 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5f 	bl	80017dc <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff35 	bl	80017a4 <__NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffa2 	bl	8001894 <SysTick_Config>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b08b      	sub	sp, #44	@ 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e169      	b.n	8001c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001970:	2201      	movs	r2, #1
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8158 	bne.w	8001c3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a9a      	ldr	r2, [pc, #616]	@ (8001bfc <HAL_GPIO_Init+0x2a0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d05e      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 8001998:	4a98      	ldr	r2, [pc, #608]	@ (8001bfc <HAL_GPIO_Init+0x2a0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d875      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 800199e:	4a98      	ldr	r2, [pc, #608]	@ (8001c00 <HAL_GPIO_Init+0x2a4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d058      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019a4:	4a96      	ldr	r2, [pc, #600]	@ (8001c00 <HAL_GPIO_Init+0x2a4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d86f      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019aa:	4a96      	ldr	r2, [pc, #600]	@ (8001c04 <HAL_GPIO_Init+0x2a8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d052      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019b0:	4a94      	ldr	r2, [pc, #592]	@ (8001c04 <HAL_GPIO_Init+0x2a8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d869      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019b6:	4a94      	ldr	r2, [pc, #592]	@ (8001c08 <HAL_GPIO_Init+0x2ac>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d04c      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019bc:	4a92      	ldr	r2, [pc, #584]	@ (8001c08 <HAL_GPIO_Init+0x2ac>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d863      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019c2:	4a92      	ldr	r2, [pc, #584]	@ (8001c0c <HAL_GPIO_Init+0x2b0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d046      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019c8:	4a90      	ldr	r2, [pc, #576]	@ (8001c0c <HAL_GPIO_Init+0x2b0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d85d      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d82a      	bhi.n	8001a28 <HAL_GPIO_Init+0xcc>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d859      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <HAL_GPIO_Init+0x80>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a31 	.word	0x08001a31
 80019e4:	08001a43 	.word	0x08001a43
 80019e8:	08001a85 	.word	0x08001a85
 80019ec:	08001a8b 	.word	0x08001a8b
 80019f0:	08001a8b 	.word	0x08001a8b
 80019f4:	08001a8b 	.word	0x08001a8b
 80019f8:	08001a8b 	.word	0x08001a8b
 80019fc:	08001a8b 	.word	0x08001a8b
 8001a00:	08001a8b 	.word	0x08001a8b
 8001a04:	08001a8b 	.word	0x08001a8b
 8001a08:	08001a8b 	.word	0x08001a8b
 8001a0c:	08001a8b 	.word	0x08001a8b
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a8b 	.word	0x08001a8b
 8001a18:	08001a8b 	.word	0x08001a8b
 8001a1c:	08001a8b 	.word	0x08001a8b
 8001a20:	08001a39 	.word	0x08001a39
 8001a24:	08001a4d 	.word	0x08001a4d
 8001a28:	4a79      	ldr	r2, [pc, #484]	@ (8001c10 <HAL_GPIO_Init+0x2b4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a2e:	e02c      	b.n	8001a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e029      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e024      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	3308      	adds	r3, #8
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e01f      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	330c      	adds	r3, #12
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e01a      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e013      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	611a      	str	r2, [r3, #16]
          break;
 8001a76:	e009      	b.n	8001a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	615a      	str	r2, [r3, #20]
          break;
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          break;
 8001a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d801      	bhi.n	8001a96 <HAL_GPIO_Init+0x13a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_Init+0x13e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2bff      	cmp	r3, #255	@ 0xff
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_GPIO_Init+0x14c>
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x152>
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	3b08      	subs	r3, #8
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80b1 	beq.w	8001c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001adc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a4c      	ldr	r2, [pc, #304]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c14 <HAL_GPIO_Init+0x2b8>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af4:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_GPIO_Init+0x2bc>)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <HAL_GPIO_Init+0x2c0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_GPIO_Init+0x2c4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c24 <HAL_GPIO_Init+0x2c8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1e4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_GPIO_Init+0x2cc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1e0>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5a:	492f      	ldr	r1, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x2bc>)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	492c      	ldr	r1, [pc, #176]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4928      	ldr	r1, [pc, #160]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4922      	ldr	r1, [pc, #136]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	491e      	ldr	r1, [pc, #120]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4918      	ldr	r1, [pc, #96]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4914      	ldr	r1, [pc, #80]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d021      	beq.n	8001c30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	490e      	ldr	r1, [pc, #56]	@ (8001c2c <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e021      	b.n	8001c3e <HAL_GPIO_Init+0x2e2>
 8001bfa:	bf00      	nop
 8001bfc:	10320000 	.word	0x10320000
 8001c00:	10310000 	.word	0x10310000
 8001c04:	10220000 	.word	0x10220000
 8001c08:	10210000 	.word	0x10210000
 8001c0c:	10120000 	.word	0x10120000
 8001c10:	10110000 	.word	0x10110000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_GPIO_Init+0x304>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4909      	ldr	r1, [pc, #36]	@ (8001c60 <HAL_GPIO_Init+0x304>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	3301      	adds	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f ae8e 	bne.w	8001970 <HAL_GPIO_Init+0x14>
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	372c      	adds	r7, #44	@ 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e12b      	b.n	8001efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fb60 	bl	8001380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	@ 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 f832 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a81      	ldr	r2, [pc, #516]	@ (8001f08 <HAL_I2C_Init+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d807      	bhi.n	8001d18 <HAL_I2C_Init+0x84>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a80      	ldr	r2, [pc, #512]	@ (8001f0c <HAL_I2C_Init+0x278>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x92>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f10 <HAL_I2C_Init+0x27c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e7      	b.n	8001efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a78      	ldr	r2, [pc, #480]	@ (8001f14 <HAL_I2C_Init+0x280>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_I2C_Init+0x274>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d802      	bhi.n	8001d68 <HAL_I2C_Init+0xd4>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e009      	b.n	8001d7c <HAL_I2C_Init+0xe8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a69      	ldr	r2, [pc, #420]	@ (8001f18 <HAL_I2C_Init+0x284>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	495c      	ldr	r1, [pc, #368]	@ (8001f08 <HAL_I2C_Init+0x274>)
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d819      	bhi.n	8001dd0 <HAL_I2C_Init+0x13c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_I2C_Init+0x138>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e59      	subs	r1, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	e051      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e04f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_I2C_Init+0x168>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e012      	b.n	8001e22 <HAL_I2C_Init+0x18e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Init+0x196>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e022      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <HAL_I2C_Init+0x1bc>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e58      	subs	r0, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6911      	ldr	r1, [r2, #16]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68d2      	ldr	r2, [r2, #12]
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	000186a0 	.word	0x000186a0
 8001f0c:	001e847f 	.word	0x001e847f
 8001f10:	003d08ff 	.word	0x003d08ff
 8001f14:	431bde83 	.word	0x431bde83
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	817b      	strh	r3, [r7, #10]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fbd8 	bl	80016e4 <HAL_GetTick>
 8001f34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	f040 80e0 	bne.w	8002104 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2319      	movs	r3, #25
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4970      	ldr	r1, [pc, #448]	@ (8002110 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f964 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0d3      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0x50>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0cc      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d007      	beq.n	8001f92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2221      	movs	r2, #33	@ 0x21
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2210      	movs	r2, #16
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	893a      	ldrh	r2, [r7, #8]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f89c 	bl	8002118 <I2C_MasterRequestWrite>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e08d      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002000:	e066      	b.n	80020d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa22 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	2b04      	cmp	r3, #4
 8002018:	d107      	bne.n	800202a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11b      	bne.n	80020a4 <HAL_I2C_Master_Transmit+0x188>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d017      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6a39      	ldr	r1, [r7, #32]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fa19 	bl	80024e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d107      	bne.n	80020cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01a      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d194      	bne.n	8002002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000

08002118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d006      	beq.n	8002142 <I2C_MasterRequestWrite+0x2a>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d003      	beq.n	8002142 <I2C_MasterRequestWrite+0x2a>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002140:	d108      	bne.n	8002154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e00b      	b.n	800216c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	2b12      	cmp	r3, #18
 800215a:	d107      	bne.n	800216c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800216a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f84f 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002192:	d103      	bne.n	800219c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e035      	b.n	800220c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021a8:	d108      	bne.n	80021bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e01b      	b.n	80021f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021bc:	897b      	ldrh	r3, [r7, #10]
 80021be:	11db      	asrs	r3, r3, #7
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 0306 	and.w	r3, r3, #6
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f063 030f 	orn	r3, r3, #15
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <I2C_MasterRequestWrite+0xfc>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f898 	bl	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e010      	b.n	800220c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <I2C_MasterRequestWrite+0x100>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f888 	bl	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00010008 	.word	0x00010008
 8002218:	00010002 	.word	0x00010002

0800221c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222c:	e048      	b.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d044      	beq.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff fa55 	bl	80016e4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d139      	bne.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10d      	bne.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	e00c      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	429a      	cmp	r2, r3
 8002290:	d116      	bne.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e023      	b.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	43da      	mvns	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4013      	ands	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	e00c      	b.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	429a      	cmp	r2, r3
 8002304:	d093      	beq.n	800222e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800231e:	e071      	b.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232e:	d123      	bne.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e067      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d041      	beq.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002380:	f7ff f9b0 	bl	80016e4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d302      	bcc.n	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d136      	bne.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e00b      	b.n	80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	43da      	mvns	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e021      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10c      	bne.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e00b      	b.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	f47f af6d 	bne.w	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245c:	e034      	b.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f886 	bl	8002570 <I2C_IsAcknowledgeFailed>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e034      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d028      	beq.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7ff f935 	bl	80016e4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11d      	bne.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d016      	beq.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	d1c3      	bne.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ec:	e034      	b.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f83e 	bl	8002570 <I2C_IsAcknowledgeFailed>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e034      	b.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d028      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7ff f8ed 	bl	80016e4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11d      	bne.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d016      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e007      	b.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d1c3      	bne.n	80024ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d11b      	bne.n	80025c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002590:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e272      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b92      	ldr	r3, [pc, #584]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
 8002604:	4b8c      	ldr	r3, [pc, #560]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b89      	ldr	r3, [pc, #548]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x12c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d168      	bne.n	80026f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e24c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x76>
 8002634:	4b80      	ldr	r3, [pc, #512]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a7f      	ldr	r2, [pc, #508]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b7b      	ldr	r3, [pc, #492]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7a      	ldr	r2, [pc, #488]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b78      	ldr	r3, [pc, #480]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0xbc>
 800266e:	4b72      	ldr	r3, [pc, #456]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a71      	ldr	r2, [pc, #452]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6f      	ldr	r3, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002688:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a67      	ldr	r2, [pc, #412]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff f81c 	bl	80016e4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff f818 	bl	80016e4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e200      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe4>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f808 	bl	80016e4 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f804 	bl	80016e4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1ec      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x10c>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002712:	4b49      	ldr	r3, [pc, #292]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
 800271e:	4b46      	ldr	r3, [pc, #280]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c0      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4939      	ldr	r1, [pc, #228]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe ffbd 	bl	80016e4 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe ffb9 	bl	80016e4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4927      	ldr	r1, [pc, #156]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff9c 	bl	80016e4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe ff98 	bl	80016e4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e180      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03a      	beq.n	8002850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe ff7c 	bl	80016e4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f0:	f7fe ff78 	bl	80016e4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e160      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 faba 	bl	8002d88 <RCC_Delay>
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7fe ff62 	bl	80016e4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002822:	e00f      	b.n	8002844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe ff5e 	bl	80016e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d908      	bls.n	8002844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e146      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	42420000 	.word	0x42420000
 8002840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b92      	ldr	r3, [pc, #584]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e9      	bne.n	8002824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a6 	beq.w	80029aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b8b      	ldr	r3, [pc, #556]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a87      	ldr	r2, [pc, #540]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b85      	ldr	r3, [pc, #532]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b82      	ldr	r3, [pc, #520]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d118      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002896:	4b7f      	ldr	r3, [pc, #508]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7fe ff1f 	bl	80016e4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7fe ff1b 	bl	80016e4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	@ 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e103      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b75      	ldr	r3, [pc, #468]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x312>
 80028d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	e02d      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x334>
 80028e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a69      	ldr	r2, [pc, #420]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b67      	ldr	r3, [pc, #412]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a66      	ldr	r2, [pc, #408]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	e01c      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x356>
 8002908:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a60      	ldr	r2, [pc, #384]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	4b5e      	ldr	r3, [pc, #376]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a5d      	ldr	r2, [pc, #372]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002922:	4b5b      	ldr	r3, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a5a      	ldr	r2, [pc, #360]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d015      	beq.n	800296e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fecf 	bl	80016e4 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fecb 	bl	80016e4 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0b1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ee      	beq.n	800294a <HAL_RCC_OscConfig+0x37e>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7fe feb9 	bl	80016e4 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe feb5 	bl	80016e4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e09b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d061      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d146      	bne.n	8002a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fe89 	bl	80016e4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fe85 	bl	80016e4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e06d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4921      	ldr	r1, [pc, #132]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a19      	ldr	r1, [r3, #32]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	430b      	orrs	r3, r1
 8002a22:	491b      	ldr	r1, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fe59 	bl	80016e4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe fe55 	bl	80016e4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46a>
 8002a54:	e035      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fe42 	bl	80016e4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fe3e 	bl	80016e4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e026      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x498>
 8002a82:	e01e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e019      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_OscConfig+0x500>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d0      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b67      	ldr	r3, [pc, #412]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4965      	ldr	r1, [pc, #404]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d115      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e073      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b39      	ldr	r3, [pc, #228]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4936      	ldr	r1, [pc, #216]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fd90 	bl	80016e4 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe fd8c 	bl	80016e4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e053      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2d      	ldr	r3, [pc, #180]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d210      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fcee 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004594 	.word	0x08004594
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x36>
 8002cd2:	e027      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e027      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4a17      	ldr	r2, [pc, #92]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c5b      	lsrs	r3, r3, #17
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e004      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	613b      	str	r3, [r7, #16]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2a:	693b      	ldr	r3, [r7, #16]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	007a1200 	.word	0x007a1200
 8002d40:	080045ac 	.word	0x080045ac
 8002d44:	080045bc 	.word	0x080045bc
 8002d48:	003d0900 	.word	0x003d0900

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b02      	ldr	r3, [pc, #8]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff2 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	080045a4 	.word	0x080045a4

08002d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <RCC_Delay+0x34>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <RCC_Delay+0x38>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da4:	bf00      	nop
  }
  while (Delay --);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	60fa      	str	r2, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <RCC_Delay+0x1c>
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	10624dd3 	.word	0x10624dd3

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fb06 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fc4e 	bl	80036a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e041      	b.n	8002ef8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f839 	bl	8002f00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fbff 	bl	80036a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start_IT+0x1e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e013      	b.n	8002f5a <HAL_TIM_IC_Start_IT+0x46>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_IC_Start_IT+0x2e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e00b      	b.n	8002f5a <HAL_TIM_IC_Start_IT+0x46>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_IC_Start_IT+0x3e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e003      	b.n	8002f5a <HAL_TIM_IC_Start_IT+0x46>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_TIM_IC_Start_IT+0x58>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e013      	b.n	8002f94 <HAL_TIM_IC_Start_IT+0x80>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d104      	bne.n	8002f7c <HAL_TIM_IC_Start_IT+0x68>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e00b      	b.n	8002f94 <HAL_TIM_IC_Start_IT+0x80>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d104      	bne.n	8002f8c <HAL_TIM_IC_Start_IT+0x78>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e003      	b.n	8002f94 <HAL_TIM_IC_Start_IT+0x80>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0b8      	b.n	8003118 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0xa2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb4:	e013      	b.n	8002fde <HAL_TIM_IC_Start_IT+0xca>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0xb2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc4:	e00b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0xca>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_IC_Start_IT+0xc2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	e003      	b.n	8002fde <HAL_TIM_IC_Start_IT+0xca>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_IC_Start_IT+0xda>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fec:	e013      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x102>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_IC_Start_IT+0xea>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ffc:	e00b      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x102>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d104      	bne.n	800300e <HAL_TIM_IC_Start_IT+0xfa>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800300c:	e003      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x102>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d841      	bhi.n	80030a0 <HAL_TIM_IC_Start_IT+0x18c>
 800301c:	a201      	add	r2, pc, #4	@ (adr r2, 8003024 <HAL_TIM_IC_Start_IT+0x110>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003059 	.word	0x08003059
 8003028:	080030a1 	.word	0x080030a1
 800302c:	080030a1 	.word	0x080030a1
 8003030:	080030a1 	.word	0x080030a1
 8003034:	0800306b 	.word	0x0800306b
 8003038:	080030a1 	.word	0x080030a1
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080030a1 	.word	0x080030a1
 8003044:	0800307d 	.word	0x0800307d
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030a1 	.word	0x080030a1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	0800308f 	.word	0x0800308f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0202 	orr.w	r2, r2, #2
 8003066:	60da      	str	r2, [r3, #12]
      break;
 8003068:	e01d      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0204 	orr.w	r2, r2, #4
 8003078:	60da      	str	r2, [r3, #12]
      break;
 800307a:	e014      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	60da      	str	r2, [r3, #12]
      break;
 800308c:	e00b      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0210 	orr.w	r2, r2, #16
 800309c:	60da      	str	r2, [r3, #12]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d134      	bne.n	8003116 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd06 	bl	8003ac6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	@ (8003120 <HAL_TIM_IC_Start_IT+0x20c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIM_IC_Start_IT+0x1ce>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030cc:	d009      	beq.n	80030e2 <HAL_TIM_IC_Start_IT+0x1ce>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <HAL_TIM_IC_Start_IT+0x210>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIM_IC_Start_IT+0x1ce>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <HAL_TIM_IC_Start_IT+0x214>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d111      	bne.n	8003106 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d010      	beq.n	8003116 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	e007      	b.n	8003116 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800

0800312c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d020      	beq.n	8003190 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0202 	mvn.w	r2, #2
 8003160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fcd6 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa75 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fa7b 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0204 	mvn.w	r2, #4
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fcb0 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa4f 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fa55 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0208 	mvn.w	r2, #8
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2204      	movs	r2, #4
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fc8a 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa29 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fa2f 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fc64 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa03 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa09 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0201 	mvn.w	r2, #1
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9e2 	bl	800365c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00c      	beq.n	80032bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fc91 	bl	8003bde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9d9 	bl	8003692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0220 	mvn.w	r2, #32
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fc64 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003326:	2302      	movs	r3, #2
 8003328:	e088      	b.n	800343c <HAL_TIM_IC_ConfigChannel+0x130>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003348:	f000 fa1a 	bl	8003780 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020c 	bic.w	r2, r2, #12
 800335a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
 800336e:	e060      	b.n	8003432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d11c      	bne.n	80033b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003386:	f000 fa83 	bl	8003890 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003398:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6999      	ldr	r1, [r3, #24]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	619a      	str	r2, [r3, #24]
 80033ae:	e040      	b.n	8003432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11b      	bne.n	80033ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80033c6:	f000 face 	bl	8003966 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 020c 	bic.w	r2, r2, #12
 80033d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
 80033ec:	e021      	b.n	8003432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d11c      	bne.n	800342e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003404:	f000 faea 	bl	80039dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003416:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69d9      	ldr	r1, [r3, #28]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
 800342c:	e001      	b.n	8003432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e0b4      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x186>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003498:	d03e      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0xd4>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	f200 8087 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a6:	f000 8086 	beq.w	80035b6 <HAL_TIM_ConfigClockSource+0x172>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ae:	d87f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b70      	cmp	r3, #112	@ 0x70
 80034b2:	d01a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xa6>
 80034b4:	2b70      	cmp	r3, #112	@ 0x70
 80034b6:	d87b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d050      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x11a>
 80034bc:	2b60      	cmp	r3, #96	@ 0x60
 80034be:	d877      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b50      	cmp	r3, #80	@ 0x50
 80034c2:	d03c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xfa>
 80034c4:	2b50      	cmp	r3, #80	@ 0x50
 80034c6:	d873      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d058      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x13a>
 80034cc:	2b40      	cmp	r3, #64	@ 0x40
 80034ce:	d86f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d064      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b30      	cmp	r3, #48	@ 0x30
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d867      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d05a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	f000 fac5 	bl	8003a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800350c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04f      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003528:	f000 faae 	bl	8003a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 f972 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	@ 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa7c 	bl	8003a54 <TIM_ITRx_SetConfig>
      break;
 800355c:	e02c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	461a      	mov	r2, r3
 800356c:	f000 f9cc 	bl	8003908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	@ 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa6c 	bl	8003a54 <TIM_ITRx_SetConfig>
      break;
 800357c:	e01c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	461a      	mov	r2, r3
 800358c:	f000 f952 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa5c 	bl	8003a54 <TIM_ITRx_SetConfig>
      break;
 800359c:	e00c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fa53 	bl	8003a54 <TIM_ITRx_SetConfig>
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e000      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d831      	bhi.n	800364c <HAL_TIM_ReadCapturedValue+0x78>
 80035e8:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003625 	.word	0x08003625
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	0800362f 	.word	0x0800362f
 8003604:	0800364d 	.word	0x0800364d
 8003608:	0800364d 	.word	0x0800364d
 800360c:	0800364d 	.word	0x0800364d
 8003610:	08003639 	.word	0x08003639
 8003614:	0800364d 	.word	0x0800364d
 8003618:	0800364d 	.word	0x0800364d
 800361c:	0800364d 	.word	0x0800364d
 8003620:	08003643 	.word	0x08003643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	60fb      	str	r3, [r7, #12]

      break;
 800362c:	e00f      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	60fb      	str	r3, [r7, #12]

      break;
 8003636:	e00a      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	60fb      	str	r3, [r7, #12]

      break;
 8003640:	e005      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	60fb      	str	r3, [r7, #12]

      break;
 800364a:	e000      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800364c:	bf00      	nop
  }

  return tmpreg;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <TIM_Base_SetConfig+0xd0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x30>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x30>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <TIM_Base_SetConfig+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x30>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <TIM_Base_SetConfig+0xd8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a22      	ldr	r2, [pc, #136]	@ (8003774 <TIM_Base_SetConfig+0xd0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <TIM_Base_SetConfig+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <TIM_Base_SetConfig+0xd8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <TIM_Base_SetConfig+0xd0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d103      	bne.n	800374c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f023 0201 	bic.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]
  }
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 0201 	bic.w	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <TIM_TI1_SetConfig+0xa8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_TI1_SetConfig+0x46>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b4:	d007      	beq.n	80037c6 <TIM_TI1_SetConfig+0x46>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <TIM_TI1_SetConfig+0xac>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_TI1_SetConfig+0x46>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <TIM_TI1_SetConfig+0xb0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <TIM_TI1_SetConfig+0x4a>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <TIM_TI1_SetConfig+0x4c>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e003      	b.n	80037ea <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f023 030a 	bic.w	r3, r3, #10
 8003804:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 030a 	and.w	r3, r3, #10
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0201 	bic.w	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 030a 	bic.w	r3, r3, #10
 8003870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	031b      	lsls	r3, r3, #12
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0210 	bic.w	r2, r3, #16
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	031b      	lsls	r3, r3, #12
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003966:	b480      	push	{r7}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	031b      	lsls	r3, r3, #12
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	031b      	lsls	r3, r3, #12
 8003a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f043 0307 	orr.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2201      	movs	r2, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1a      	ldr	r2, [r3, #32]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	401a      	ands	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e046      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a10      	ldr	r2, [pc, #64]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <siprintf>:
 8003bf0:	b40e      	push	{r1, r2, r3}
 8003bf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003bf6:	b500      	push	{lr}
 8003bf8:	b09c      	sub	sp, #112	@ 0x70
 8003bfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bfc:	9002      	str	r0, [sp, #8]
 8003bfe:	9006      	str	r0, [sp, #24]
 8003c00:	9107      	str	r1, [sp, #28]
 8003c02:	9104      	str	r1, [sp, #16]
 8003c04:	4808      	ldr	r0, [pc, #32]	@ (8003c28 <siprintf+0x38>)
 8003c06:	4909      	ldr	r1, [pc, #36]	@ (8003c2c <siprintf+0x3c>)
 8003c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	a902      	add	r1, sp, #8
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	f000 f992 	bl	8003f3c <_svfiprintf_r>
 8003c18:	2200      	movs	r2, #0
 8003c1a:	9b02      	ldr	r3, [sp, #8]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	b01c      	add	sp, #112	@ 0x70
 8003c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c24:	b003      	add	sp, #12
 8003c26:	4770      	bx	lr
 8003c28:	20000010 	.word	0x20000010
 8003c2c:	ffff0208 	.word	0xffff0208

08003c30 <memset>:
 8003c30:	4603      	mov	r3, r0
 8003c32:	4402      	add	r2, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <__errno>:
 8003c40:	4b01      	ldr	r3, [pc, #4]	@ (8003c48 <__errno+0x8>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000010 	.word	0x20000010

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	2600      	movs	r6, #0
 8003c50:	4d0c      	ldr	r5, [pc, #48]	@ (8003c84 <__libc_init_array+0x38>)
 8003c52:	4c0d      	ldr	r4, [pc, #52]	@ (8003c88 <__libc_init_array+0x3c>)
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	f000 fc78 	bl	8004550 <_init>
 8003c60:	2600      	movs	r6, #0
 8003c62:	4d0a      	ldr	r5, [pc, #40]	@ (8003c8c <__libc_init_array+0x40>)
 8003c64:	4c0a      	ldr	r4, [pc, #40]	@ (8003c90 <__libc_init_array+0x44>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	080045fc 	.word	0x080045fc
 8003c88:	080045fc 	.word	0x080045fc
 8003c8c:	080045fc 	.word	0x080045fc
 8003c90:	08004600 	.word	0x08004600

08003c94 <__retarget_lock_acquire_recursive>:
 8003c94:	4770      	bx	lr

08003c96 <__retarget_lock_release_recursive>:
 8003c96:	4770      	bx	lr

08003c98 <_free_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	2900      	cmp	r1, #0
 8003c9e:	d040      	beq.n	8003d22 <_free_r+0x8a>
 8003ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca4:	1f0c      	subs	r4, r1, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	18e4      	addlt	r4, r4, r3
 8003cac:	f000 f8de 	bl	8003e6c <__malloc_lock>
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d24 <_free_r+0x8c>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	b933      	cbnz	r3, 8003cc4 <_free_r+0x2c>
 8003cb6:	6063      	str	r3, [r4, #4]
 8003cb8:	6014      	str	r4, [r2, #0]
 8003cba:	4628      	mov	r0, r5
 8003cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc0:	f000 b8da 	b.w	8003e78 <__malloc_unlock>
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d908      	bls.n	8003cda <_free_r+0x42>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	1821      	adds	r1, r4, r0
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	bf01      	itttt	eq
 8003cd0:	6819      	ldreq	r1, [r3, #0]
 8003cd2:	685b      	ldreq	r3, [r3, #4]
 8003cd4:	1809      	addeq	r1, r1, r0
 8003cd6:	6021      	streq	r1, [r4, #0]
 8003cd8:	e7ed      	b.n	8003cb6 <_free_r+0x1e>
 8003cda:	461a      	mov	r2, r3
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	b10b      	cbz	r3, 8003ce4 <_free_r+0x4c>
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d9fa      	bls.n	8003cda <_free_r+0x42>
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	1850      	adds	r0, r2, r1
 8003ce8:	42a0      	cmp	r0, r4
 8003cea:	d10b      	bne.n	8003d04 <_free_r+0x6c>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	4401      	add	r1, r0
 8003cf0:	1850      	adds	r0, r2, r1
 8003cf2:	4283      	cmp	r3, r0
 8003cf4:	6011      	str	r1, [r2, #0]
 8003cf6:	d1e0      	bne.n	8003cba <_free_r+0x22>
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4408      	add	r0, r1
 8003cfe:	6010      	str	r0, [r2, #0]
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	e7da      	b.n	8003cba <_free_r+0x22>
 8003d04:	d902      	bls.n	8003d0c <_free_r+0x74>
 8003d06:	230c      	movs	r3, #12
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	e7d6      	b.n	8003cba <_free_r+0x22>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	1821      	adds	r1, r4, r0
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bf01      	itttt	eq
 8003d14:	6819      	ldreq	r1, [r3, #0]
 8003d16:	685b      	ldreq	r3, [r3, #4]
 8003d18:	1809      	addeq	r1, r1, r0
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	6054      	str	r4, [r2, #4]
 8003d20:	e7cb      	b.n	8003cba <_free_r+0x22>
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	2000033c 	.word	0x2000033c

08003d28 <sbrk_aligned>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d68 <sbrk_aligned+0x40>)
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	6831      	ldr	r1, [r6, #0]
 8003d30:	4605      	mov	r5, r0
 8003d32:	b911      	cbnz	r1, 8003d3a <sbrk_aligned+0x12>
 8003d34:	f000 fbaa 	bl	800448c <_sbrk_r>
 8003d38:	6030      	str	r0, [r6, #0]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f000 fba5 	bl	800448c <_sbrk_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d103      	bne.n	8003d4e <sbrk_aligned+0x26>
 8003d46:	f04f 34ff 	mov.w	r4, #4294967295
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	1cc4      	adds	r4, r0, #3
 8003d50:	f024 0403 	bic.w	r4, r4, #3
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d0f8      	beq.n	8003d4a <sbrk_aligned+0x22>
 8003d58:	1a21      	subs	r1, r4, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 fb96 	bl	800448c <_sbrk_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d1f2      	bne.n	8003d4a <sbrk_aligned+0x22>
 8003d64:	e7ef      	b.n	8003d46 <sbrk_aligned+0x1e>
 8003d66:	bf00      	nop
 8003d68:	20000338 	.word	0x20000338

08003d6c <_malloc_r>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	1ccd      	adds	r5, r1, #3
 8003d72:	f025 0503 	bic.w	r5, r5, #3
 8003d76:	3508      	adds	r5, #8
 8003d78:	2d0c      	cmp	r5, #12
 8003d7a:	bf38      	it	cc
 8003d7c:	250c      	movcc	r5, #12
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	4606      	mov	r6, r0
 8003d82:	db01      	blt.n	8003d88 <_malloc_r+0x1c>
 8003d84:	42a9      	cmp	r1, r5
 8003d86:	d904      	bls.n	8003d92 <_malloc_r+0x26>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e68 <_malloc_r+0xfc>
 8003d96:	f000 f869 	bl	8003e6c <__malloc_lock>
 8003d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9e:	461c      	mov	r4, r3
 8003da0:	bb44      	cbnz	r4, 8003df4 <_malloc_r+0x88>
 8003da2:	4629      	mov	r1, r5
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff ffbf 	bl	8003d28 <sbrk_aligned>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	4604      	mov	r4, r0
 8003dae:	d158      	bne.n	8003e62 <_malloc_r+0xf6>
 8003db0:	f8d8 4000 	ldr.w	r4, [r8]
 8003db4:	4627      	mov	r7, r4
 8003db6:	2f00      	cmp	r7, #0
 8003db8:	d143      	bne.n	8003e42 <_malloc_r+0xd6>
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d04b      	beq.n	8003e56 <_malloc_r+0xea>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	eb04 0903 	add.w	r9, r4, r3
 8003dc8:	f000 fb60 	bl	800448c <_sbrk_r>
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	d142      	bne.n	8003e56 <_malloc_r+0xea>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	1a6d      	subs	r5, r5, r1
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f7ff ffa6 	bl	8003d28 <sbrk_aligned>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d03a      	beq.n	8003e56 <_malloc_r+0xea>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	442b      	add	r3, r5
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	bb62      	cbnz	r2, 8003e48 <_malloc_r+0xdc>
 8003dee:	f8c8 7000 	str.w	r7, [r8]
 8003df2:	e00f      	b.n	8003e14 <_malloc_r+0xa8>
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	1b52      	subs	r2, r2, r5
 8003df8:	d420      	bmi.n	8003e3c <_malloc_r+0xd0>
 8003dfa:	2a0b      	cmp	r2, #11
 8003dfc:	d917      	bls.n	8003e2e <_malloc_r+0xc2>
 8003dfe:	1961      	adds	r1, r4, r5
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	6025      	str	r5, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	6059      	strne	r1, [r3, #4]
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	bf08      	it	eq
 8003e0c:	f8c8 1000 	streq.w	r1, [r8]
 8003e10:	5162      	str	r2, [r4, r5]
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f82f 	bl	8003e78 <__malloc_unlock>
 8003e1a:	f104 000b 	add.w	r0, r4, #11
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	f020 0007 	bic.w	r0, r0, #7
 8003e24:	1ac2      	subs	r2, r0, r3
 8003e26:	bf1c      	itt	ne
 8003e28:	1a1b      	subne	r3, r3, r0
 8003e2a:	50a3      	strne	r3, [r4, r2]
 8003e2c:	e7af      	b.n	8003d8e <_malloc_r+0x22>
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	bf0c      	ite	eq
 8003e34:	f8c8 2000 	streq.w	r2, [r8]
 8003e38:	605a      	strne	r2, [r3, #4]
 8003e3a:	e7eb      	b.n	8003e14 <_malloc_r+0xa8>
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	6864      	ldr	r4, [r4, #4]
 8003e40:	e7ae      	b.n	8003da0 <_malloc_r+0x34>
 8003e42:	463c      	mov	r4, r7
 8003e44:	687f      	ldr	r7, [r7, #4]
 8003e46:	e7b6      	b.n	8003db6 <_malloc_r+0x4a>
 8003e48:	461a      	mov	r2, r3
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d1fb      	bne.n	8003e48 <_malloc_r+0xdc>
 8003e50:	2300      	movs	r3, #0
 8003e52:	6053      	str	r3, [r2, #4]
 8003e54:	e7de      	b.n	8003e14 <_malloc_r+0xa8>
 8003e56:	230c      	movs	r3, #12
 8003e58:	4630      	mov	r0, r6
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	f000 f80c 	bl	8003e78 <__malloc_unlock>
 8003e60:	e794      	b.n	8003d8c <_malloc_r+0x20>
 8003e62:	6005      	str	r5, [r0, #0]
 8003e64:	e7d6      	b.n	8003e14 <_malloc_r+0xa8>
 8003e66:	bf00      	nop
 8003e68:	2000033c 	.word	0x2000033c

08003e6c <__malloc_lock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__malloc_lock+0x8>)
 8003e6e:	f7ff bf11 	b.w	8003c94 <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	20000334 	.word	0x20000334

08003e78 <__malloc_unlock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__malloc_unlock+0x8>)
 8003e7a:	f7ff bf0c 	b.w	8003c96 <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	20000334 	.word	0x20000334

08003e84 <__ssputs_r>:
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	461f      	mov	r7, r3
 8003e8a:	688e      	ldr	r6, [r1, #8]
 8003e8c:	4682      	mov	sl, r0
 8003e8e:	42be      	cmp	r6, r7
 8003e90:	460c      	mov	r4, r1
 8003e92:	4690      	mov	r8, r2
 8003e94:	680b      	ldr	r3, [r1, #0]
 8003e96:	d82d      	bhi.n	8003ef4 <__ssputs_r+0x70>
 8003e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ea0:	d026      	beq.n	8003ef0 <__ssputs_r+0x6c>
 8003ea2:	6965      	ldr	r5, [r4, #20]
 8003ea4:	6909      	ldr	r1, [r1, #16]
 8003ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eaa:	eba3 0901 	sub.w	r9, r3, r1
 8003eae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eb2:	1c7b      	adds	r3, r7, #1
 8003eb4:	444b      	add	r3, r9
 8003eb6:	106d      	asrs	r5, r5, #1
 8003eb8:	429d      	cmp	r5, r3
 8003eba:	bf38      	it	cc
 8003ebc:	461d      	movcc	r5, r3
 8003ebe:	0553      	lsls	r3, r2, #21
 8003ec0:	d527      	bpl.n	8003f12 <__ssputs_r+0x8e>
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7ff ff52 	bl	8003d6c <_malloc_r>
 8003ec8:	4606      	mov	r6, r0
 8003eca:	b360      	cbz	r0, 8003f26 <__ssputs_r+0xa2>
 8003ecc:	464a      	mov	r2, r9
 8003ece:	6921      	ldr	r1, [r4, #16]
 8003ed0:	f000 fafa 	bl	80044c8 <memcpy>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	6126      	str	r6, [r4, #16]
 8003ee2:	444e      	add	r6, r9
 8003ee4:	6026      	str	r6, [r4, #0]
 8003ee6:	463e      	mov	r6, r7
 8003ee8:	6165      	str	r5, [r4, #20]
 8003eea:	eba5 0509 	sub.w	r5, r5, r9
 8003eee:	60a5      	str	r5, [r4, #8]
 8003ef0:	42be      	cmp	r6, r7
 8003ef2:	d900      	bls.n	8003ef6 <__ssputs_r+0x72>
 8003ef4:	463e      	mov	r6, r7
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	4641      	mov	r1, r8
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	f000 faac 	bl	8004458 <memmove>
 8003f00:	2000      	movs	r0, #0
 8003f02:	68a3      	ldr	r3, [r4, #8]
 8003f04:	1b9b      	subs	r3, r3, r6
 8003f06:	60a3      	str	r3, [r4, #8]
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	4433      	add	r3, r6
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	462a      	mov	r2, r5
 8003f14:	f000 fae6 	bl	80044e4 <_realloc_r>
 8003f18:	4606      	mov	r6, r0
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d1e0      	bne.n	8003ee0 <__ssputs_r+0x5c>
 8003f1e:	4650      	mov	r0, sl
 8003f20:	6921      	ldr	r1, [r4, #16]
 8003f22:	f7ff feb9 	bl	8003c98 <_free_r>
 8003f26:	230c      	movs	r3, #12
 8003f28:	f8ca 3000 	str.w	r3, [sl]
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	e7e9      	b.n	8003f0e <__ssputs_r+0x8a>
	...

08003f3c <_svfiprintf_r>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	4698      	mov	r8, r3
 8003f42:	898b      	ldrh	r3, [r1, #12]
 8003f44:	4607      	mov	r7, r0
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	460d      	mov	r5, r1
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	b09d      	sub	sp, #116	@ 0x74
 8003f4e:	d510      	bpl.n	8003f72 <_svfiprintf_r+0x36>
 8003f50:	690b      	ldr	r3, [r1, #16]
 8003f52:	b973      	cbnz	r3, 8003f72 <_svfiprintf_r+0x36>
 8003f54:	2140      	movs	r1, #64	@ 0x40
 8003f56:	f7ff ff09 	bl	8003d6c <_malloc_r>
 8003f5a:	6028      	str	r0, [r5, #0]
 8003f5c:	6128      	str	r0, [r5, #16]
 8003f5e:	b930      	cbnz	r0, 8003f6e <_svfiprintf_r+0x32>
 8003f60:	230c      	movs	r3, #12
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	b01d      	add	sp, #116	@ 0x74
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	2340      	movs	r3, #64	@ 0x40
 8003f70:	616b      	str	r3, [r5, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f76:	2320      	movs	r3, #32
 8003f78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f7c:	2330      	movs	r3, #48	@ 0x30
 8003f7e:	f04f 0901 	mov.w	r9, #1
 8003f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004120 <_svfiprintf_r+0x1e4>
 8003f8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f8e:	4623      	mov	r3, r4
 8003f90:	469a      	mov	sl, r3
 8003f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f96:	b10a      	cbz	r2, 8003f9c <_svfiprintf_r+0x60>
 8003f98:	2a25      	cmp	r2, #37	@ 0x25
 8003f9a:	d1f9      	bne.n	8003f90 <_svfiprintf_r+0x54>
 8003f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa0:	d00b      	beq.n	8003fba <_svfiprintf_r+0x7e>
 8003fa2:	465b      	mov	r3, fp
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff ff6b 	bl	8003e84 <__ssputs_r>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f000 80a7 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fb6:	445a      	add	r2, fp
 8003fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fba:	f89a 3000 	ldrb.w	r3, [sl]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 809f 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fce:	f10a 0a01 	add.w	sl, sl, #1
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fda:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fdc:	4654      	mov	r4, sl
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe4:	484e      	ldr	r0, [pc, #312]	@ (8004120 <_svfiprintf_r+0x1e4>)
 8003fe6:	f000 fa61 	bl	80044ac <memchr>
 8003fea:	9a04      	ldr	r2, [sp, #16]
 8003fec:	b9d8      	cbnz	r0, 8004026 <_svfiprintf_r+0xea>
 8003fee:	06d0      	lsls	r0, r2, #27
 8003ff0:	bf44      	itt	mi
 8003ff2:	2320      	movmi	r3, #32
 8003ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ff8:	0711      	lsls	r1, r2, #28
 8003ffa:	bf44      	itt	mi
 8003ffc:	232b      	movmi	r3, #43	@ 0x2b
 8003ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004002:	f89a 3000 	ldrb.w	r3, [sl]
 8004006:	2b2a      	cmp	r3, #42	@ 0x2a
 8004008:	d015      	beq.n	8004036 <_svfiprintf_r+0xfa>
 800400a:	4654      	mov	r4, sl
 800400c:	2000      	movs	r0, #0
 800400e:	f04f 0c0a 	mov.w	ip, #10
 8004012:	9a07      	ldr	r2, [sp, #28]
 8004014:	4621      	mov	r1, r4
 8004016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800401a:	3b30      	subs	r3, #48	@ 0x30
 800401c:	2b09      	cmp	r3, #9
 800401e:	d94b      	bls.n	80040b8 <_svfiprintf_r+0x17c>
 8004020:	b1b0      	cbz	r0, 8004050 <_svfiprintf_r+0x114>
 8004022:	9207      	str	r2, [sp, #28]
 8004024:	e014      	b.n	8004050 <_svfiprintf_r+0x114>
 8004026:	eba0 0308 	sub.w	r3, r0, r8
 800402a:	fa09 f303 	lsl.w	r3, r9, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	46a2      	mov	sl, r4
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	e7d2      	b.n	8003fdc <_svfiprintf_r+0xa0>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	9103      	str	r1, [sp, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfbb      	ittet	lt
 8004042:	425b      	neglt	r3, r3
 8004044:	f042 0202 	orrlt.w	r2, r2, #2
 8004048:	9307      	strge	r3, [sp, #28]
 800404a:	9307      	strlt	r3, [sp, #28]
 800404c:	bfb8      	it	lt
 800404e:	9204      	strlt	r2, [sp, #16]
 8004050:	7823      	ldrb	r3, [r4, #0]
 8004052:	2b2e      	cmp	r3, #46	@ 0x2e
 8004054:	d10a      	bne.n	800406c <_svfiprintf_r+0x130>
 8004056:	7863      	ldrb	r3, [r4, #1]
 8004058:	2b2a      	cmp	r3, #42	@ 0x2a
 800405a:	d132      	bne.n	80040c2 <_svfiprintf_r+0x186>
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	3402      	adds	r4, #2
 8004060:	1d1a      	adds	r2, r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004124 <_svfiprintf_r+0x1e8>
 8004070:	2203      	movs	r2, #3
 8004072:	4650      	mov	r0, sl
 8004074:	7821      	ldrb	r1, [r4, #0]
 8004076:	f000 fa19 	bl	80044ac <memchr>
 800407a:	b138      	cbz	r0, 800408c <_svfiprintf_r+0x150>
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	eba0 000a 	sub.w	r0, r0, sl
 8004084:	4082      	lsls	r2, r0
 8004086:	4313      	orrs	r3, r2
 8004088:	3401      	adds	r4, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004090:	2206      	movs	r2, #6
 8004092:	4825      	ldr	r0, [pc, #148]	@ (8004128 <_svfiprintf_r+0x1ec>)
 8004094:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004098:	f000 fa08 	bl	80044ac <memchr>
 800409c:	2800      	cmp	r0, #0
 800409e:	d036      	beq.n	800410e <_svfiprintf_r+0x1d2>
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <_svfiprintf_r+0x1f0>)
 80040a2:	bb1b      	cbnz	r3, 80040ec <_svfiprintf_r+0x1b0>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	3308      	adds	r3, #8
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b2:	4433      	add	r3, r6
 80040b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b6:	e76a      	b.n	8003f8e <_svfiprintf_r+0x52>
 80040b8:	460c      	mov	r4, r1
 80040ba:	2001      	movs	r0, #1
 80040bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c0:	e7a8      	b.n	8004014 <_svfiprintf_r+0xd8>
 80040c2:	2300      	movs	r3, #0
 80040c4:	f04f 0c0a 	mov.w	ip, #10
 80040c8:	4619      	mov	r1, r3
 80040ca:	3401      	adds	r4, #1
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	4620      	mov	r0, r4
 80040d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d4:	3a30      	subs	r2, #48	@ 0x30
 80040d6:	2a09      	cmp	r2, #9
 80040d8:	d903      	bls.n	80040e2 <_svfiprintf_r+0x1a6>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0c6      	beq.n	800406c <_svfiprintf_r+0x130>
 80040de:	9105      	str	r1, [sp, #20]
 80040e0:	e7c4      	b.n	800406c <_svfiprintf_r+0x130>
 80040e2:	4604      	mov	r4, r0
 80040e4:	2301      	movs	r3, #1
 80040e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ea:	e7f0      	b.n	80040ce <_svfiprintf_r+0x192>
 80040ec:	ab03      	add	r3, sp, #12
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	462a      	mov	r2, r5
 80040f2:	4638      	mov	r0, r7
 80040f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <_svfiprintf_r+0x1f4>)
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	f3af 8000 	nop.w
 80040fc:	1c42      	adds	r2, r0, #1
 80040fe:	4606      	mov	r6, r0
 8004100:	d1d6      	bne.n	80040b0 <_svfiprintf_r+0x174>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	065b      	lsls	r3, r3, #25
 8004106:	f53f af2d 	bmi.w	8003f64 <_svfiprintf_r+0x28>
 800410a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800410c:	e72c      	b.n	8003f68 <_svfiprintf_r+0x2c>
 800410e:	ab03      	add	r3, sp, #12
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	462a      	mov	r2, r5
 8004114:	4638      	mov	r0, r7
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <_svfiprintf_r+0x1f4>)
 8004118:	a904      	add	r1, sp, #16
 800411a:	f000 f87d 	bl	8004218 <_printf_i>
 800411e:	e7ed      	b.n	80040fc <_svfiprintf_r+0x1c0>
 8004120:	080045be 	.word	0x080045be
 8004124:	080045c4 	.word	0x080045c4
 8004128:	080045c8 	.word	0x080045c8
 800412c:	00000000 	.word	0x00000000
 8004130:	08003e85 	.word	0x08003e85

08004134 <_printf_common>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4616      	mov	r6, r2
 800413a:	4698      	mov	r8, r3
 800413c:	688a      	ldr	r2, [r1, #8]
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	4607      	mov	r7, r0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfb8      	it	lt
 8004146:	4613      	movlt	r3, r2
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800414e:	460c      	mov	r4, r1
 8004150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004154:	b10a      	cbz	r2, 800415a <_printf_common+0x26>
 8004156:	3301      	adds	r3, #1
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	6833      	ldrmi	r3, [r6, #0]
 8004162:	3302      	addmi	r3, #2
 8004164:	6033      	strmi	r3, [r6, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	f015 0506 	ands.w	r5, r5, #6
 800416c:	d106      	bne.n	800417c <_printf_common+0x48>
 800416e:	f104 0a19 	add.w	sl, r4, #25
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	6832      	ldr	r2, [r6, #0]
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	42ab      	cmp	r3, r5
 800417a:	dc2b      	bgt.n	80041d4 <_printf_common+0xa0>
 800417c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	3b00      	subs	r3, #0
 8004184:	bf18      	it	ne
 8004186:	2301      	movne	r3, #1
 8004188:	0692      	lsls	r2, r2, #26
 800418a:	d430      	bmi.n	80041ee <_printf_common+0xba>
 800418c:	4641      	mov	r1, r8
 800418e:	4638      	mov	r0, r7
 8004190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004194:	47c8      	blx	r9
 8004196:	3001      	adds	r0, #1
 8004198:	d023      	beq.n	80041e2 <_printf_common+0xae>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	6922      	ldr	r2, [r4, #16]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	bf14      	ite	ne
 80041a6:	2500      	movne	r5, #0
 80041a8:	6833      	ldreq	r3, [r6, #0]
 80041aa:	f04f 0600 	mov.w	r6, #0
 80041ae:	bf08      	it	eq
 80041b0:	68e5      	ldreq	r5, [r4, #12]
 80041b2:	f104 041a 	add.w	r4, r4, #26
 80041b6:	bf08      	it	eq
 80041b8:	1aed      	subeq	r5, r5, r3
 80041ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80041be:	bf08      	it	eq
 80041c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfc4      	itt	gt
 80041c8:	1a9b      	subgt	r3, r3, r2
 80041ca:	18ed      	addgt	r5, r5, r3
 80041cc:	42b5      	cmp	r5, r6
 80041ce:	d11a      	bne.n	8004206 <_printf_common+0xd2>
 80041d0:	2000      	movs	r0, #0
 80041d2:	e008      	b.n	80041e6 <_printf_common+0xb2>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4652      	mov	r2, sl
 80041d8:	4641      	mov	r1, r8
 80041da:	4638      	mov	r0, r7
 80041dc:	47c8      	blx	r9
 80041de:	3001      	adds	r0, #1
 80041e0:	d103      	bne.n	80041ea <_printf_common+0xb6>
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ea:	3501      	adds	r5, #1
 80041ec:	e7c1      	b.n	8004172 <_printf_common+0x3e>
 80041ee:	2030      	movs	r0, #48	@ 0x30
 80041f0:	18e1      	adds	r1, r4, r3
 80041f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041fc:	4422      	add	r2, r4
 80041fe:	3302      	adds	r3, #2
 8004200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004204:	e7c2      	b.n	800418c <_printf_common+0x58>
 8004206:	2301      	movs	r3, #1
 8004208:	4622      	mov	r2, r4
 800420a:	4641      	mov	r1, r8
 800420c:	4638      	mov	r0, r7
 800420e:	47c8      	blx	r9
 8004210:	3001      	adds	r0, #1
 8004212:	d0e6      	beq.n	80041e2 <_printf_common+0xae>
 8004214:	3601      	adds	r6, #1
 8004216:	e7d9      	b.n	80041cc <_printf_common+0x98>

08004218 <_printf_i>:
 8004218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	7e0f      	ldrb	r7, [r1, #24]
 800421e:	4691      	mov	r9, r2
 8004220:	2f78      	cmp	r7, #120	@ 0x78
 8004222:	4680      	mov	r8, r0
 8004224:	460c      	mov	r4, r1
 8004226:	469a      	mov	sl, r3
 8004228:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800422a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800422e:	d807      	bhi.n	8004240 <_printf_i+0x28>
 8004230:	2f62      	cmp	r7, #98	@ 0x62
 8004232:	d80a      	bhi.n	800424a <_printf_i+0x32>
 8004234:	2f00      	cmp	r7, #0
 8004236:	f000 80d3 	beq.w	80043e0 <_printf_i+0x1c8>
 800423a:	2f58      	cmp	r7, #88	@ 0x58
 800423c:	f000 80ba 	beq.w	80043b4 <_printf_i+0x19c>
 8004240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004248:	e03a      	b.n	80042c0 <_printf_i+0xa8>
 800424a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800424e:	2b15      	cmp	r3, #21
 8004250:	d8f6      	bhi.n	8004240 <_printf_i+0x28>
 8004252:	a101      	add	r1, pc, #4	@ (adr r1, 8004258 <_printf_i+0x40>)
 8004254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042c5 	.word	0x080042c5
 8004260:	08004241 	.word	0x08004241
 8004264:	08004241 	.word	0x08004241
 8004268:	08004241 	.word	0x08004241
 800426c:	08004241 	.word	0x08004241
 8004270:	080042c5 	.word	0x080042c5
 8004274:	08004241 	.word	0x08004241
 8004278:	08004241 	.word	0x08004241
 800427c:	08004241 	.word	0x08004241
 8004280:	08004241 	.word	0x08004241
 8004284:	080043c7 	.word	0x080043c7
 8004288:	080042ef 	.word	0x080042ef
 800428c:	08004381 	.word	0x08004381
 8004290:	08004241 	.word	0x08004241
 8004294:	08004241 	.word	0x08004241
 8004298:	080043e9 	.word	0x080043e9
 800429c:	08004241 	.word	0x08004241
 80042a0:	080042ef 	.word	0x080042ef
 80042a4:	08004241 	.word	0x08004241
 80042a8:	08004241 	.word	0x08004241
 80042ac:	08004389 	.word	0x08004389
 80042b0:	6833      	ldr	r3, [r6, #0]
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6032      	str	r2, [r6, #0]
 80042b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042c0:	2301      	movs	r3, #1
 80042c2:	e09e      	b.n	8004402 <_printf_i+0x1ea>
 80042c4:	6833      	ldr	r3, [r6, #0]
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	1d19      	adds	r1, r3, #4
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	0606      	lsls	r6, r0, #24
 80042ce:	d501      	bpl.n	80042d4 <_printf_i+0xbc>
 80042d0:	681d      	ldr	r5, [r3, #0]
 80042d2:	e003      	b.n	80042dc <_printf_i+0xc4>
 80042d4:	0645      	lsls	r5, r0, #25
 80042d6:	d5fb      	bpl.n	80042d0 <_printf_i+0xb8>
 80042d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042dc:	2d00      	cmp	r5, #0
 80042de:	da03      	bge.n	80042e8 <_printf_i+0xd0>
 80042e0:	232d      	movs	r3, #45	@ 0x2d
 80042e2:	426d      	negs	r5, r5
 80042e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e8:	230a      	movs	r3, #10
 80042ea:	4859      	ldr	r0, [pc, #356]	@ (8004450 <_printf_i+0x238>)
 80042ec:	e011      	b.n	8004312 <_printf_i+0xfa>
 80042ee:	6821      	ldr	r1, [r4, #0]
 80042f0:	6833      	ldr	r3, [r6, #0]
 80042f2:	0608      	lsls	r0, r1, #24
 80042f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042f8:	d402      	bmi.n	8004300 <_printf_i+0xe8>
 80042fa:	0649      	lsls	r1, r1, #25
 80042fc:	bf48      	it	mi
 80042fe:	b2ad      	uxthmi	r5, r5
 8004300:	2f6f      	cmp	r7, #111	@ 0x6f
 8004302:	6033      	str	r3, [r6, #0]
 8004304:	bf14      	ite	ne
 8004306:	230a      	movne	r3, #10
 8004308:	2308      	moveq	r3, #8
 800430a:	4851      	ldr	r0, [pc, #324]	@ (8004450 <_printf_i+0x238>)
 800430c:	2100      	movs	r1, #0
 800430e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004312:	6866      	ldr	r6, [r4, #4]
 8004314:	2e00      	cmp	r6, #0
 8004316:	bfa8      	it	ge
 8004318:	6821      	ldrge	r1, [r4, #0]
 800431a:	60a6      	str	r6, [r4, #8]
 800431c:	bfa4      	itt	ge
 800431e:	f021 0104 	bicge.w	r1, r1, #4
 8004322:	6021      	strge	r1, [r4, #0]
 8004324:	b90d      	cbnz	r5, 800432a <_printf_i+0x112>
 8004326:	2e00      	cmp	r6, #0
 8004328:	d04b      	beq.n	80043c2 <_printf_i+0x1aa>
 800432a:	4616      	mov	r6, r2
 800432c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004330:	fb03 5711 	mls	r7, r3, r1, r5
 8004334:	5dc7      	ldrb	r7, [r0, r7]
 8004336:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800433a:	462f      	mov	r7, r5
 800433c:	42bb      	cmp	r3, r7
 800433e:	460d      	mov	r5, r1
 8004340:	d9f4      	bls.n	800432c <_printf_i+0x114>
 8004342:	2b08      	cmp	r3, #8
 8004344:	d10b      	bne.n	800435e <_printf_i+0x146>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07df      	lsls	r7, r3, #31
 800434a:	d508      	bpl.n	800435e <_printf_i+0x146>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	6861      	ldr	r1, [r4, #4]
 8004350:	4299      	cmp	r1, r3
 8004352:	bfde      	ittt	le
 8004354:	2330      	movle	r3, #48	@ 0x30
 8004356:	f806 3c01 	strble.w	r3, [r6, #-1]
 800435a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800435e:	1b92      	subs	r2, r2, r6
 8004360:	6122      	str	r2, [r4, #16]
 8004362:	464b      	mov	r3, r9
 8004364:	4621      	mov	r1, r4
 8004366:	4640      	mov	r0, r8
 8004368:	f8cd a000 	str.w	sl, [sp]
 800436c:	aa03      	add	r2, sp, #12
 800436e:	f7ff fee1 	bl	8004134 <_printf_common>
 8004372:	3001      	adds	r0, #1
 8004374:	d14a      	bne.n	800440c <_printf_i+0x1f4>
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	b004      	add	sp, #16
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f043 0320 	orr.w	r3, r3, #32
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	2778      	movs	r7, #120	@ 0x78
 800438a:	4832      	ldr	r0, [pc, #200]	@ (8004454 <_printf_i+0x23c>)
 800438c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	6831      	ldr	r1, [r6, #0]
 8004394:	061f      	lsls	r7, r3, #24
 8004396:	f851 5b04 	ldr.w	r5, [r1], #4
 800439a:	d402      	bmi.n	80043a2 <_printf_i+0x18a>
 800439c:	065f      	lsls	r7, r3, #25
 800439e:	bf48      	it	mi
 80043a0:	b2ad      	uxthmi	r5, r5
 80043a2:	6031      	str	r1, [r6, #0]
 80043a4:	07d9      	lsls	r1, r3, #31
 80043a6:	bf44      	itt	mi
 80043a8:	f043 0320 	orrmi.w	r3, r3, #32
 80043ac:	6023      	strmi	r3, [r4, #0]
 80043ae:	b11d      	cbz	r5, 80043b8 <_printf_i+0x1a0>
 80043b0:	2310      	movs	r3, #16
 80043b2:	e7ab      	b.n	800430c <_printf_i+0xf4>
 80043b4:	4826      	ldr	r0, [pc, #152]	@ (8004450 <_printf_i+0x238>)
 80043b6:	e7e9      	b.n	800438c <_printf_i+0x174>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f023 0320 	bic.w	r3, r3, #32
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	e7f6      	b.n	80043b0 <_printf_i+0x198>
 80043c2:	4616      	mov	r6, r2
 80043c4:	e7bd      	b.n	8004342 <_printf_i+0x12a>
 80043c6:	6833      	ldr	r3, [r6, #0]
 80043c8:	6825      	ldr	r5, [r4, #0]
 80043ca:	1d18      	adds	r0, r3, #4
 80043cc:	6961      	ldr	r1, [r4, #20]
 80043ce:	6030      	str	r0, [r6, #0]
 80043d0:	062e      	lsls	r6, r5, #24
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	d501      	bpl.n	80043da <_printf_i+0x1c2>
 80043d6:	6019      	str	r1, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <_printf_i+0x1c8>
 80043da:	0668      	lsls	r0, r5, #25
 80043dc:	d5fb      	bpl.n	80043d6 <_printf_i+0x1be>
 80043de:	8019      	strh	r1, [r3, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	4616      	mov	r6, r2
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	e7bc      	b.n	8004362 <_printf_i+0x14a>
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	2100      	movs	r1, #0
 80043ec:	1d1a      	adds	r2, r3, #4
 80043ee:	6032      	str	r2, [r6, #0]
 80043f0:	681e      	ldr	r6, [r3, #0]
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 f859 	bl	80044ac <memchr>
 80043fa:	b108      	cbz	r0, 8004400 <_printf_i+0x1e8>
 80043fc:	1b80      	subs	r0, r0, r6
 80043fe:	6060      	str	r0, [r4, #4]
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	6123      	str	r3, [r4, #16]
 8004404:	2300      	movs	r3, #0
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800440a:	e7aa      	b.n	8004362 <_printf_i+0x14a>
 800440c:	4632      	mov	r2, r6
 800440e:	4649      	mov	r1, r9
 8004410:	4640      	mov	r0, r8
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	47d0      	blx	sl
 8004416:	3001      	adds	r0, #1
 8004418:	d0ad      	beq.n	8004376 <_printf_i+0x15e>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	079b      	lsls	r3, r3, #30
 800441e:	d413      	bmi.n	8004448 <_printf_i+0x230>
 8004420:	68e0      	ldr	r0, [r4, #12]
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	4298      	cmp	r0, r3
 8004426:	bfb8      	it	lt
 8004428:	4618      	movlt	r0, r3
 800442a:	e7a6      	b.n	800437a <_printf_i+0x162>
 800442c:	2301      	movs	r3, #1
 800442e:	4632      	mov	r2, r6
 8004430:	4649      	mov	r1, r9
 8004432:	4640      	mov	r0, r8
 8004434:	47d0      	blx	sl
 8004436:	3001      	adds	r0, #1
 8004438:	d09d      	beq.n	8004376 <_printf_i+0x15e>
 800443a:	3501      	adds	r5, #1
 800443c:	68e3      	ldr	r3, [r4, #12]
 800443e:	9903      	ldr	r1, [sp, #12]
 8004440:	1a5b      	subs	r3, r3, r1
 8004442:	42ab      	cmp	r3, r5
 8004444:	dcf2      	bgt.n	800442c <_printf_i+0x214>
 8004446:	e7eb      	b.n	8004420 <_printf_i+0x208>
 8004448:	2500      	movs	r5, #0
 800444a:	f104 0619 	add.w	r6, r4, #25
 800444e:	e7f5      	b.n	800443c <_printf_i+0x224>
 8004450:	080045cf 	.word	0x080045cf
 8004454:	080045e0 	.word	0x080045e0

08004458 <memmove>:
 8004458:	4288      	cmp	r0, r1
 800445a:	b510      	push	{r4, lr}
 800445c:	eb01 0402 	add.w	r4, r1, r2
 8004460:	d902      	bls.n	8004468 <memmove+0x10>
 8004462:	4284      	cmp	r4, r0
 8004464:	4623      	mov	r3, r4
 8004466:	d807      	bhi.n	8004478 <memmove+0x20>
 8004468:	1e43      	subs	r3, r0, #1
 800446a:	42a1      	cmp	r1, r4
 800446c:	d008      	beq.n	8004480 <memmove+0x28>
 800446e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004476:	e7f8      	b.n	800446a <memmove+0x12>
 8004478:	4601      	mov	r1, r0
 800447a:	4402      	add	r2, r0
 800447c:	428a      	cmp	r2, r1
 800447e:	d100      	bne.n	8004482 <memmove+0x2a>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448a:	e7f7      	b.n	800447c <memmove+0x24>

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	2300      	movs	r3, #0
 8004490:	4d05      	ldr	r5, [pc, #20]	@ (80044a8 <_sbrk_r+0x1c>)
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd f86a 	bl	8001570 <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000330 	.word	0x20000330

080044ac <memchr>:
 80044ac:	4603      	mov	r3, r0
 80044ae:	b510      	push	{r4, lr}
 80044b0:	b2c9      	uxtb	r1, r1
 80044b2:	4402      	add	r2, r0
 80044b4:	4293      	cmp	r3, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	d101      	bne.n	80044be <memchr+0x12>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e003      	b.n	80044c6 <memchr+0x1a>
 80044be:	7804      	ldrb	r4, [r0, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	428c      	cmp	r4, r1
 80044c4:	d1f6      	bne.n	80044b4 <memchr+0x8>
 80044c6:	bd10      	pop	{r4, pc}

080044c8 <memcpy>:
 80044c8:	440a      	add	r2, r1
 80044ca:	4291      	cmp	r1, r2
 80044cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80044d0:	d100      	bne.n	80044d4 <memcpy+0xc>
 80044d2:	4770      	bx	lr
 80044d4:	b510      	push	{r4, lr}
 80044d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044da:	4291      	cmp	r1, r2
 80044dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e0:	d1f9      	bne.n	80044d6 <memcpy+0xe>
 80044e2:	bd10      	pop	{r4, pc}

080044e4 <_realloc_r>:
 80044e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e8:	4680      	mov	r8, r0
 80044ea:	4615      	mov	r5, r2
 80044ec:	460c      	mov	r4, r1
 80044ee:	b921      	cbnz	r1, 80044fa <_realloc_r+0x16>
 80044f0:	4611      	mov	r1, r2
 80044f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f6:	f7ff bc39 	b.w	8003d6c <_malloc_r>
 80044fa:	b92a      	cbnz	r2, 8004508 <_realloc_r+0x24>
 80044fc:	f7ff fbcc 	bl	8003c98 <_free_r>
 8004500:	2400      	movs	r4, #0
 8004502:	4620      	mov	r0, r4
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	f000 f81a 	bl	8004540 <_malloc_usable_size_r>
 800450c:	4285      	cmp	r5, r0
 800450e:	4606      	mov	r6, r0
 8004510:	d802      	bhi.n	8004518 <_realloc_r+0x34>
 8004512:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004516:	d8f4      	bhi.n	8004502 <_realloc_r+0x1e>
 8004518:	4629      	mov	r1, r5
 800451a:	4640      	mov	r0, r8
 800451c:	f7ff fc26 	bl	8003d6c <_malloc_r>
 8004520:	4607      	mov	r7, r0
 8004522:	2800      	cmp	r0, #0
 8004524:	d0ec      	beq.n	8004500 <_realloc_r+0x1c>
 8004526:	42b5      	cmp	r5, r6
 8004528:	462a      	mov	r2, r5
 800452a:	4621      	mov	r1, r4
 800452c:	bf28      	it	cs
 800452e:	4632      	movcs	r2, r6
 8004530:	f7ff ffca 	bl	80044c8 <memcpy>
 8004534:	4621      	mov	r1, r4
 8004536:	4640      	mov	r0, r8
 8004538:	f7ff fbae 	bl	8003c98 <_free_r>
 800453c:	463c      	mov	r4, r7
 800453e:	e7e0      	b.n	8004502 <_realloc_r+0x1e>

08004540 <_malloc_usable_size_r>:
 8004540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004544:	1f18      	subs	r0, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfbc      	itt	lt
 800454a:	580b      	ldrlt	r3, [r1, r0]
 800454c:	18c0      	addlt	r0, r0, r3
 800454e:	4770      	bx	lr

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
