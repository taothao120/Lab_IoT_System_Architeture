
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004fc4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000060  08005024  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08005024  0000640c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd0  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db8  00000000  00000000  00011c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00013a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0c  00000000  00000000  000146f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017da4  00000000  00000000  000150fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f248  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a841  00000000  00000000  0003c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000c696c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ca580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f0c 	.word	0x08004f0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004f0c 	.word	0x08004f0c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <BH1750_Init>:


BH1750_DATA BH1750;

void BH1750_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <BH1750_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <BH1750_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <BH1750_Init+0x58>)
 800095c:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <BH1750_Init+0x60>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <BH1750_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <BH1750_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <BH1750_Init+0x58>)
 800096e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <BH1750_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <BH1750_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <BH1750_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <BH1750_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c2);
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <BH1750_Init+0x58>)
 800098e:	f001 fad1 	bl	8001f34 <HAL_I2C_Init>
	
	BH1750.time = 120;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <BH1750_Init+0x64>)
 8000994:	2278      	movs	r2, #120	@ 0x78
 8000996:	605a      	str	r2, [r3, #4]
	BH1750.mode	=	BH_CON_H_MODE;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <BH1750_Init+0x64>)
 800099a:	2210      	movs	r2, #16
 800099c:	701a      	strb	r2, [r3, #0]
	BH1750.status	= GOOG;
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <BH1750_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	739a      	strb	r2, [r3, #14]
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000e0 	.word	0x200000e0
 80009ac:	40005800 	.word	0x40005800
 80009b0:	000186a0 	.word	0x000186a0
 80009b4:	2000007c 	.word	0x2000007c

080009b8 <BH1750_Cmd_Write>:

void BH1750_Cmd_Write(uint8_t cmd)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[1];
	data[0] = cmd;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	733b      	strb	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c2,BH1750_Addr_L,data,1,BH1750.time)!=HAL_OK);
 80009c6:	bf00      	nop
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <BH1750_Cmd_Write+0x44>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f107 020c 	add.w	r2, r7, #12
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2301      	movs	r3, #1
 80009d4:	2146      	movs	r1, #70	@ 0x46
 80009d6:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <BH1750_Cmd_Write+0x48>)
 80009d8:	f001 fbf0 	bl	80021bc <HAL_I2C_Master_Transmit>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f2      	bne.n	80009c8 <BH1750_Cmd_Write+0x10>
	__HAL_I2C_CLEAR_FLAG(&hi2c2,I2C_FLAG_STOPF);
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <BH1750_Cmd_Write+0x48>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f06f 0210 	mvn.w	r2, #16
 80009ea:	615a      	str	r2, [r3, #20]
	HAL_Delay(100);
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f000 ffd3 	bl	8001998 <HAL_Delay>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000007c 	.word	0x2000007c
 8000a00:	200000e0 	.word	0x200000e0

08000a04 <BH1750_Start>:
void BH1750_Start(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	BH1750_Cmd_Write(BH1750_ON);	 //power on
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffd5 	bl	80009b8 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750_RESET);	//clear
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f7ff ffd2 	bl	80009b8 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750.mode);  //mode 
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <BH1750_Start+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffcd 	bl	80009b8 <BH1750_Cmd_Write>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000007c 	.word	0x2000007c

08000a28 <BH1750_Read>:
uint16_t BH1750_Read(void)
{   	
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af02      	add	r7, sp, #8
	uint8_t data_re[2] = {0,0};
 8000a2e:	2300      	movs	r3, #0
 8000a30:	80bb      	strh	r3, [r7, #4]
	while(HAL_I2C_Master_Receive(&hi2c2,BH1750_Addr_L,data_re,2,BH1750.time*2)!=HAL_OK);
 8000a32:	bf00      	nop
 8000a34:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2146      	movs	r1, #70	@ 0x46
 8000a42:	481a      	ldr	r0, [pc, #104]	@ (8000aac <BH1750_Read+0x84>)
 8000a44:	f001 fcb8 	bl	80023b8 <HAL_I2C_Master_Receive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f2      	bne.n	8000a34 <BH1750_Read+0xc>
	HAL_Delay(100);
 8000a4e:	2064      	movs	r0, #100	@ 0x64
 8000a50:	f000 ffa2 	bl	8001998 <HAL_Delay>
	BH1750.result_lx=data_re[0];
 8000a54:	793b      	ldrb	r3, [r7, #4]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a5a:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx=(data_re[0]<<8)+data_re[1];  //????,?????
 8000a5c:	793b      	ldrb	r3, [r7, #4]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	797a      	ldrb	r2, [r7, #5]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a6a:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx= BH1750.result_lx/1.2;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a6e:	899b      	ldrh	r3, [r3, #12]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fcd1 	bl	8000418 <__aeabi_i2d>
 8000a76:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <BH1750_Read+0x88>)
 8000a7c:	f7ff fe60 	bl	8000740 <__aeabi_ddiv>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff ff42 	bl	8000910 <__aeabi_d2uiz>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a92:	819a      	strh	r2, [r3, #12]
	HAL_Delay(100);
 8000a94:	2064      	movs	r0, #100	@ 0x64
 8000a96:	f000 ff7f 	bl	8001998 <HAL_Delay>
	return BH1750.result_lx;
 8000a9a:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <BH1750_Read+0x80>)
 8000a9c:	899b      	ldrh	r3, [r3, #12]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	200000e0 	.word	0x200000e0
 8000ab0:	3ff33333 	.word	0x3ff33333

08000ab4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	f043 030c 	orr.w	r3, r3, #12
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	2364      	movs	r3, #100	@ 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2304      	movs	r3, #4
 8000afe:	214e      	movs	r1, #78	@ 0x4e
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <lcd_send_cmd+0x5c>)
 8000b02:	f001 fb5b 	bl	80021bc <HAL_I2C_Master_Transmit>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000008c 	.word	0x2000008c

08000b14 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f023 030f 	bic.w	r3, r3, #15
 8000b24:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f043 030d 	orr.w	r3, r3, #13
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f043 0309 	orr.w	r3, r3, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	f043 030d 	orr.w	r3, r3, #13
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	f043 0309 	orr.w	r3, r3, #9
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b54:	f107 0208 	add.w	r2, r7, #8
 8000b58:	2364      	movs	r3, #100	@ 0x64
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	214e      	movs	r1, #78	@ 0x4e
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <lcd_send_data+0x5c>)
 8000b62:	f001 fb2b 	bl	80021bc <HAL_I2C_Master_Transmit>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000008c 	.word	0x2000008c

08000b74 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <lcd_put_cur+0x18>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d005      	beq.n	8000b96 <lcd_put_cur+0x22>
 8000b8a:	e009      	b.n	8000ba0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b92:	603b      	str	r3, [r7, #0]
            break;
 8000b94:	e004      	b.n	8000ba0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b9c:	603b      	str	r3, [r7, #0]
            break;
 8000b9e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff85 	bl	8000ab4 <lcd_send_cmd>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <lcd_init>:


void lcd_init (void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000bb6:	2032      	movs	r0, #50	@ 0x32
 8000bb8:	f000 feee 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bbc:	2030      	movs	r0, #48	@ 0x30
 8000bbe:	f7ff ff79 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f000 fee8 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bc8:	2030      	movs	r0, #48	@ 0x30
 8000bca:	f7ff ff73 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fee2 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bd4:	2030      	movs	r0, #48	@ 0x30
 8000bd6:	f7ff ff6d 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(10);
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f000 fedc 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000be0:	2020      	movs	r0, #32
 8000be2:	f7ff ff67 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 fed6 	bl	8001998 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bec:	2028      	movs	r0, #40	@ 0x28
 8000bee:	f7ff ff61 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fed0 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bf8:	2008      	movs	r0, #8
 8000bfa:	f7ff ff5b 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 feca 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff55 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fec4 	bl	8001998 <HAL_Delay>
	HAL_Delay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fec1 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c16:	2006      	movs	r0, #6
 8000c18:	f7ff ff4c 	bl	8000ab4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 febb 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c22:	200c      	movs	r0, #12
 8000c24:	f7ff ff46 	bl	8000ab4 <lcd_send_cmd>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c34:	e006      	b.n	8000c44 <lcd_send_string+0x18>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff68 	bl	8000b14 <lcd_send_data>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f4      	bne.n	8000c36 <lcd_send_string+0xa>
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <delay>:
int col=0;
int value_lux = 0;
char word [100];


void delay (uint16_t time){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <delay+0x2c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000c6a:	bf00      	nop
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <delay+0x2c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3f9      	bcc.n	8000c6c <delay+0x14>
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	20000134 	.word	0x20000134

08000c88 <HAL_TIM_IC_CaptureCallback>:



// Callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // if the interrupt source is channel1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a7c      	ldr	r2, [pc, #496]	@ (8000e88 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d174      	bne.n	8000d84 <HAL_TIM_IC_CaptureCallback+0xfc>
    {
        if (Is_First_Captured_1 == 0)
 8000c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e8c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d11a      	bne.n	8000cd8 <HAL_TIM_IC_CaptureCallback+0x50>
        {// if the first value is not captured
            IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f003 f973 	bl	8003f90 <HAL_TIM_ReadCapturedValue>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a78      	ldr	r2, [pc, #480]	@ (8000e90 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000cae:	6013      	str	r3, [r2, #0]
            Is_First_Captured_1 = 1;// set the first captured as true
 8000cb0:	4b76      	ldr	r3, [pc, #472]	@ (8000e8c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]

			// Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 020a 	bic.w	r2, r2, #10
 8000cc4:	621a      	str	r2, [r3, #32]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a1a      	ldr	r2, [r3, #32]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0202 	orr.w	r2, r2, #2
 8000cd4:	621a      	str	r2, [r3, #32]
 8000cd6:	e055      	b.n	8000d84 <HAL_TIM_IC_CaptureCallback+0xfc>
        } else {
            IC_Val2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f003 f958 	bl	8003f90 <HAL_TIM_ReadCapturedValue>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a6c      	ldr	r2, [pc, #432]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000ce4:	6013      	str	r3, [r2, #0]

            if (IC_Val2_1 > IC_Val1_1) {
 8000ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b69      	ldr	r3, [pc, #420]	@ (8000e90 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d907      	bls.n	8000d02 <HAL_TIM_IC_CaptureCallback+0x7a>
                Difference_1 = IC_Val2_1 - IC_Val1_1;
 8000cf2:	4b68      	ldr	r3, [pc, #416]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b66      	ldr	r3, [pc, #408]	@ (8000e90 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a66      	ldr	r2, [pc, #408]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e009      	b.n	8000d16 <HAL_TIM_IC_CaptureCallback+0x8e>
            }else
            {
                Difference_1 = (0xffff - IC_Val1_1) + IC_Val2_1;
 8000d02:	4b64      	ldr	r3, [pc, #400]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b62      	ldr	r3, [pc, #392]	@ (8000e90 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d10:	33ff      	adds	r3, #255	@ 0xff
 8000d12:	4a61      	ldr	r2, [pc, #388]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000d14:	6013      	str	r3, [r2, #0]
            }

            Distance_1 = Difference_1 * 0.032 / 2;
 8000d16:	4b60      	ldr	r3, [pc, #384]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fb6c 	bl	80003f8 <__aeabi_ui2d>
 8000d20:	a357      	add	r3, pc, #348	@ (adr r3, 8000e80 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d26:	f7ff fbe1 	bl	80004ec <__aeabi_dmul>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d3a:	f7ff fd01 	bl	8000740 <__aeabi_ddiv>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff fde3 	bl	8000910 <__aeabi_d2uiz>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b53      	ldr	r3, [pc, #332]	@ (8000e9c <HAL_TIM_IC_CaptureCallback+0x214>)
 8000d50:	701a      	strb	r2, [r3, #0]
            Is_First_Captured_1 = 0; //set it back to call
 8000d52:	4b4e      	ldr	r3, [pc, #312]	@ (8000e8c <HAL_TIM_IC_CaptureCallback+0x204>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a1a      	ldr	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020a 	bic.w	r2, r2, #10
 8000d66:	621a      	str	r2, [r3, #32]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a12      	ldr	r2, [r2, #32]
 8000d72:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000d74:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4b49      	ldr	r3, [pc, #292]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0202 	bic.w	r2, r2, #2
 8000d82:	60da      	str	r2, [r3, #12]
        }
    }

    if (htim->Instance == TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8c:	d174      	bne.n	8000e78 <HAL_TIM_IC_CaptureCallback+0x1f0>
    {  // TIM2
        if (Is_First_Captured_2 == 0)
 8000d8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ea4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11a      	bne.n	8000dcc <HAL_TIM_IC_CaptureCallback+0x144>
        {
            IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d96:	2100      	movs	r1, #0
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f003 f8f9 	bl	8003f90 <HAL_TIM_ReadCapturedValue>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a41      	ldr	r2, [pc, #260]	@ (8000ea8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000da2:	6013      	str	r3, [r2, #0]
            Is_First_Captured_2 = 1; // set the first captured as true
 8000da4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]

            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6a1a      	ldr	r2, [r3, #32]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 020a 	bic.w	r2, r2, #10
 8000db8:	621a      	str	r2, [r3, #32]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6a1a      	ldr	r2, [r3, #32]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 0202 	orr.w	r2, r2, #2
 8000dc8:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
        }
    }
}
 8000dca:	e055      	b.n	8000e78 <HAL_TIM_IC_CaptureCallback+0x1f0>
            IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f003 f8de 	bl	8003f90 <HAL_TIM_ReadCapturedValue>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a35      	ldr	r2, [pc, #212]	@ (8000eac <HAL_TIM_IC_CaptureCallback+0x224>)
 8000dd8:	6013      	str	r3, [r2, #0]
            if (IC_Val2_2 > IC_Val1_2) {
 8000dda:	4b34      	ldr	r3, [pc, #208]	@ (8000eac <HAL_TIM_IC_CaptureCallback+0x224>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b32      	ldr	r3, [pc, #200]	@ (8000ea8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <HAL_TIM_IC_CaptureCallback+0x16e>
                Difference_2 = IC_Val2_2 - IC_Val1_2;
 8000de6:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <HAL_TIM_IC_CaptureCallback+0x224>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e009      	b.n	8000e0a <HAL_TIM_IC_CaptureCallback+0x182>
                Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8000df6:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_TIM_IC_CaptureCallback+0x224>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e04:	33ff      	adds	r3, #255	@ 0xff
 8000e06:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000e08:	6013      	str	r3, [r2, #0]
            Distance_2 = Difference_2 * 0.032 / 2;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff faf2 	bl	80003f8 <__aeabi_ui2d>
 8000e14:	a31a      	add	r3, pc, #104	@ (adr r3, 8000e80 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fb67 	bl	80004ec <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e2e:	f7ff fc87 	bl	8000740 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fd69 	bl	8000910 <__aeabi_d2uiz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000e44:	701a      	strb	r2, [r3, #0]
            Is_First_Captured_2 = 0;//set it back to call
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a1a      	ldr	r2, [r3, #32]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 020a 	bic.w	r2, r2, #10
 8000e5a:	621a      	str	r2, [r3, #32]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a12      	ldr	r2, [r2, #32]
 8000e66:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0202 	bic.w	r2, r2, #2
 8000e76:	60da      	str	r2, [r3, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e84:	3fa0624d 	.word	0x3fa0624d
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	200001dc 	.word	0x200001dc
 8000e90:	200001d0 	.word	0x200001d0
 8000e94:	200001d4 	.word	0x200001d4
 8000e98:	200001d8 	.word	0x200001d8
 8000e9c:	200001dd 	.word	0x200001dd
 8000ea0:	20000134 	.word	0x20000134
 8000ea4:	200001ec 	.word	0x200001ec
 8000ea8:	200001e0 	.word	0x200001e0
 8000eac:	200001e4 	.word	0x200001e4
 8000eb0:	200001e8 	.word	0x200001e8
 8000eb4:	200001ed 	.word	0x200001ed
 8000eb8:	2000017c 	.word	0x2000017c

08000ebc <CheckRoomState>:
////        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);  // Bật LED nếu có ngư�?i
////    }
//}


void CheckRoomState(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    if (Distance_1 < outdist && wait_queue[0] != '1') {
 8000ec0:	4b49      	ldr	r3, [pc, #292]	@ (8000fe8 <CheckRoomState+0x12c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <CheckRoomState+0x130>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d212      	bcs.n	8000ef4 <CheckRoomState+0x38>
 8000ece:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <CheckRoomState+0x134>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b31      	cmp	r3, #49	@ 0x31
 8000ed4:	d00e      	beq.n	8000ef4 <CheckRoomState+0x38>
        wait_queue[strlen(wait_queue)] = '1'; // Append '1'
 8000ed6:	4846      	ldr	r0, [pc, #280]	@ (8000ff0 <CheckRoomState+0x134>)
 8000ed8:	f7ff f944 	bl	8000164 <strlen>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a44      	ldr	r2, [pc, #272]	@ (8000ff0 <CheckRoomState+0x134>)
 8000ee0:	2131      	movs	r1, #49	@ 0x31
 8000ee2:	54d1      	strb	r1, [r2, r3]
        wait_queue[strlen(wait_queue)] = '\0'; // Null-terminate
 8000ee4:	4842      	ldr	r0, [pc, #264]	@ (8000ff0 <CheckRoomState+0x134>)
 8000ee6:	f7ff f93d 	bl	8000164 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a40      	ldr	r2, [pc, #256]	@ (8000ff0 <CheckRoomState+0x134>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	54d1      	strb	r1, [r2, r3]
 8000ef2:	e018      	b.n	8000f26 <CheckRoomState+0x6a>
    } else if (Distance_2 < outdist && wait_queue[0] != '2') {
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <CheckRoomState+0x138>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <CheckRoomState+0x130>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d211      	bcs.n	8000f26 <CheckRoomState+0x6a>
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b32      	cmp	r3, #50	@ 0x32
 8000f08:	d00d      	beq.n	8000f26 <CheckRoomState+0x6a>
        wait_queue[strlen(wait_queue)] = '2'; // Append '2'
 8000f0a:	4839      	ldr	r0, [pc, #228]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f0c:	f7ff f92a 	bl	8000164 <strlen>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a37      	ldr	r2, [pc, #220]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f14:	2132      	movs	r1, #50	@ 0x32
 8000f16:	54d1      	strb	r1, [r2, r3]
        wait_queue[strlen(wait_queue)] = '\0'; // Null-terminate
 8000f18:	4835      	ldr	r0, [pc, #212]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f1a:	f7ff f923 	bl	8000164 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a33      	ldr	r2, [pc, #204]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	54d1      	strb	r1, [r2, r3]
    }

    if (strcmp(wait_queue, "12") == 0) {
 8000f26:	4934      	ldr	r1, [pc, #208]	@ (8000ff8 <CheckRoomState+0x13c>)
 8000f28:	4831      	ldr	r0, [pc, #196]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f2a:	f7ff f911 	bl	8000150 <strcmp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10e      	bne.n	8000f52 <CheckRoomState+0x96>
        npeople++;
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <CheckRoomState+0x140>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a30      	ldr	r2, [pc, #192]	@ (8000ffc <CheckRoomState+0x140>)
 8000f3c:	6013      	str	r3, [r2, #0]
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000f3e:	2203      	movs	r2, #3
 8000f40:	2100      	movs	r1, #0
 8000f42:	482b      	ldr	r0, [pc, #172]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f44:	f003 fb52 	bl	80045ec <memset>
        HAL_Delay(550);
 8000f48:	f240 2026 	movw	r0, #550	@ 0x226
 8000f4c:	f000 fd24 	bl	8001998 <HAL_Delay>
 8000f50:	e018      	b.n	8000f84 <CheckRoomState+0xc8>
    } else if (strcmp(wait_queue, "21") == 0 && npeople > 0) {
 8000f52:	492b      	ldr	r1, [pc, #172]	@ (8001000 <CheckRoomState+0x144>)
 8000f54:	4826      	ldr	r0, [pc, #152]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f56:	f7ff f8fb 	bl	8000150 <strcmp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d111      	bne.n	8000f84 <CheckRoomState+0xc8>
 8000f60:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <CheckRoomState+0x140>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <CheckRoomState+0xc8>
        npeople--;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <CheckRoomState+0x140>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <CheckRoomState+0x140>)
 8000f70:	6013      	str	r3, [r2, #0]
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000f72:	2203      	movs	r2, #3
 8000f74:	2100      	movs	r1, #0
 8000f76:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f78:	f003 fb38 	bl	80045ec <memset>
        HAL_Delay(550);
 8000f7c:	f240 2026 	movw	r0, #550	@ 0x226
 8000f80:	f000 fd0a 	bl	8001998 <HAL_Delay>
    }

    if (strlen(wait_queue) > 2 || strcmp(wait_queue, "11") == 0 || strcmp(wait_queue, "22") == 0 || timeoutcounter > 200) {
 8000f84:	481a      	ldr	r0, [pc, #104]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f86:	f7ff f8ed 	bl	8000164 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d811      	bhi.n	8000fb4 <CheckRoomState+0xf8>
 8000f90:	491c      	ldr	r1, [pc, #112]	@ (8001004 <CheckRoomState+0x148>)
 8000f92:	4817      	ldr	r0, [pc, #92]	@ (8000ff0 <CheckRoomState+0x134>)
 8000f94:	f7ff f8dc 	bl	8000150 <strcmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00a      	beq.n	8000fb4 <CheckRoomState+0xf8>
 8000f9e:	491a      	ldr	r1, [pc, #104]	@ (8001008 <CheckRoomState+0x14c>)
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <CheckRoomState+0x134>)
 8000fa2:	f7ff f8d5 	bl	8000150 <strcmp>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <CheckRoomState+0xf8>
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <CheckRoomState+0x150>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fb2:	d908      	bls.n	8000fc6 <CheckRoomState+0x10a>
        memset(wait_queue, '\0', sizeof(wait_queue)); // Clear queue
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <CheckRoomState+0x134>)
 8000fba:	f003 fb17 	bl	80045ec <memset>
        timeoutcounter = 0; // Reset timeout counter
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <CheckRoomState+0x150>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
            timeoutcounter++;
        } else {
            timeoutcounter = 0; // Reset if queue length is not 1
        }
    }
}
 8000fc4:	e00e      	b.n	8000fe4 <CheckRoomState+0x128>
        if (strlen(wait_queue) == 1) {
 8000fc6:	480a      	ldr	r0, [pc, #40]	@ (8000ff0 <CheckRoomState+0x134>)
 8000fc8:	f7ff f8cc 	bl	8000164 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <CheckRoomState+0x122>
            timeoutcounter++;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <CheckRoomState+0x150>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <CheckRoomState+0x150>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	e002      	b.n	8000fe4 <CheckRoomState+0x128>
            timeoutcounter = 0; // Reset if queue length is not 1
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <CheckRoomState+0x150>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001dd 	.word	0x200001dd
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	200001c8 	.word	0x200001c8
 8000ff4:	200001ed 	.word	0x200001ed
 8000ff8:	08004f24 	.word	0x08004f24
 8000ffc:	200001c4 	.word	0x200001c4
 8001000:	08004f28 	.word	0x08004f28
 8001004:	08004f2c 	.word	0x08004f2c
 8001008:	08004f30 	.word	0x08004f30
 800100c:	200001cc 	.word	0x200001cc

08001010 <HCSR04_Read_1>:

void HCSR04_Read_1 (void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001014:	2201      	movs	r2, #1
 8001016:	2102      	movs	r1, #2
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <HCSR04_Read_1+0x34>)
 800101a:	f000 ff73 	bl	8001f04 <HAL_GPIO_WritePin>
    delay(10); // wait 10us
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff fe1a 	bl	8000c58 <delay>
    HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET); // pull the TRIG in LOW
 8001024:	2200      	movs	r2, #0
 8001026:	2102      	movs	r1, #2
 8001028:	4806      	ldr	r0, [pc, #24]	@ (8001044 <HCSR04_Read_1+0x34>)
 800102a:	f000 ff6b 	bl	8001f04 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HCSR04_Read_1+0x38>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <HCSR04_Read_1+0x38>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0202 	orr.w	r2, r2, #2
 800103c:	60da      	str	r2, [r3, #12]
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800
 8001048:	20000134 	.word	0x20000134

0800104c <HCSR04_Read_2>:

void HCSR04_Read_2 (void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <HCSR04_Read_2+0x38>)
 8001058:	f000 ff54 	bl	8001f04 <HAL_GPIO_WritePin>
    delay(10); // wait 10us
 800105c:	200a      	movs	r0, #10
 800105e:	f7ff fdfb 	bl	8000c58 <delay>
    HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET); // pull the TRIG in LOW
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001068:	4806      	ldr	r0, [pc, #24]	@ (8001084 <HCSR04_Read_2+0x38>)
 800106a:	f000 ff4b 	bl	8001f04 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HCSR04_Read_2+0x3c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <HCSR04_Read_2+0x3c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0202 	orr.w	r2, r2, #2
 800107c:	60da      	str	r2, [r3, #12]
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40010800 	.word	0x40010800
 8001088:	2000017c 	.word	0x2000017c

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 fc20 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f876 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 f9dc 	bl	8001454 <MX_GPIO_Init>
  MX_TIM1_Init();
 800109c:	f000 f914 	bl	80012c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010a0:	f000 f986 	bl	80013b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80010a4:	f000 f8b4 	bl	8001210 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010a8:	f000 f8e0 	bl	800126c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*--------BH1750--------*/
  	BH1750_Init();
 80010ac:	f7ff fc50 	bl	8000950 <BH1750_Init>
  	BH1750_Start();
 80010b0:	f7ff fca8 	bl	8000a04 <BH1750_Start>
  	HAL_Delay(500);
 80010b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b8:	f000 fc6e 	bl	8001998 <HAL_Delay>

    /*--------LCD--------*/
  lcd_init();
 80010bc:	f7ff fd79 	bl	8000bb2 <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010c0:	2100      	movs	r1, #0
 80010c2:	4827      	ldr	r0, [pc, #156]	@ (8001160 <main+0xd4>)
 80010c4:	f002 fc04 	bl	80038d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	4826      	ldr	r0, [pc, #152]	@ (8001164 <main+0xd8>)
 80010cc:	f002 fc00 	bl	80038d0 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HCSR04_Read_1();
 80010d0:	f7ff ff9e 	bl	8001010 <HCSR04_Read_1>
	  HCSR04_Read_2();
 80010d4:	f7ff ffba 	bl	800104c <HCSR04_Read_2>
//	  HAL_Delay(200);
	  CheckRoomState();
 80010d8:	f7ff fef0 	bl	8000ebc <CheckRoomState>
	  HAL_Delay(200);
 80010dc:	20c8      	movs	r0, #200	@ 0xc8
 80010de:	f000 fc5b 	bl	8001998 <HAL_Delay>
	  value_lux = BH1750_Read();
 80010e2:	f7ff fca1 	bl	8000a28 <BH1750_Read>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <main+0xdc>)
 80010ec:	601a      	str	r2, [r3, #0]
	  if(value_lux <51)
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <main+0xdc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b32      	cmp	r3, #50	@ 0x32
 80010f4:	dc06      	bgt.n	8001104 <main+0x78>
	  {
	 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fc:	481b      	ldr	r0, [pc, #108]	@ (800116c <main+0xe0>)
 80010fe:	f000 ff01 	bl	8001f04 <HAL_GPIO_WritePin>
 8001102:	e005      	b.n	8001110 <main+0x84>
	  }
	  else
	  {
	 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	4818      	ldr	r0, [pc, #96]	@ (800116c <main+0xe0>)
 800110c:	f000 fefa 	bl	8001f04 <HAL_GPIO_WritePin>
	  }

	  lcd_put_cur(0, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fd2e 	bl	8000b74 <lcd_put_cur>
	  sprintf (lcdBuffer, "People: %02d ", npeople);
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <main+0xe4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4915      	ldr	r1, [pc, #84]	@ (8001174 <main+0xe8>)
 8001120:	4815      	ldr	r0, [pc, #84]	@ (8001178 <main+0xec>)
 8001122:	f003 fa43 	bl	80045ac <siprintf>
	  lcd_send_string(lcdBuffer);
 8001126:	4814      	ldr	r0, [pc, #80]	@ (8001178 <main+0xec>)
 8001128:	f7ff fd80 	bl	8000c2c <lcd_send_string>
	  memset(lcdBuffer, '\0', 50);
 800112c:	2232      	movs	r2, #50	@ 0x32
 800112e:	2100      	movs	r1, #0
 8001130:	4811      	ldr	r0, [pc, #68]	@ (8001178 <main+0xec>)
 8001132:	f003 fa5b 	bl	80045ec <memset>
	  lcd_put_cur(1, 0);
 8001136:	2100      	movs	r1, #0
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fd1b 	bl	8000b74 <lcd_put_cur>
	  sprintf(word, "Lux Value: %03d", value_lux);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <main+0xdc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	490d      	ldr	r1, [pc, #52]	@ (800117c <main+0xf0>)
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <main+0xf4>)
 8001148:	f003 fa30 	bl	80045ac <siprintf>
	  lcd_send_string(word);
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <main+0xf4>)
 800114e:	f7ff fd6d 	bl	8000c2c <lcd_send_string>
	  memset(word, '\0', 50);
 8001152:	2232      	movs	r2, #50	@ 0x32
 8001154:	2100      	movs	r1, #0
 8001156:	480a      	ldr	r0, [pc, #40]	@ (8001180 <main+0xf4>)
 8001158:	f003 fa48 	bl	80045ec <memset>
	  HCSR04_Read_1();
 800115c:	e7b8      	b.n	80010d0 <main+0x44>
 800115e:	bf00      	nop
 8001160:	20000134 	.word	0x20000134
 8001164:	2000017c 	.word	0x2000017c
 8001168:	20000254 	.word	0x20000254
 800116c:	40011000 	.word	0x40011000
 8001170:	200001c4 	.word	0x200001c4
 8001174:	08004f34 	.word	0x08004f34
 8001178:	200001f0 	.word	0x200001f0
 800117c:	08004f44 	.word	0x08004f44
 8001180:	20000258 	.word	0x20000258

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	@ 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	@ 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fa2a 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fee5 	bl	8002f9c <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d8:	f000 f9aa 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f952 	bl	80034a0 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001202:	f000 f995 	bl	8001530 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	@ 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f000 fe71 	bl	8001f34 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f96a 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000008c 	.word	0x2000008c
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_I2C2_Init+0x50>)
 8001272:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <MX_I2C2_Init+0x54>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_I2C2_Init+0x50>)
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_I2C2_Init+0x58>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_I2C2_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_I2C2_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_I2C2_Init+0x50>)
 800128a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_I2C2_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_I2C2_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_I2C2_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_I2C2_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_I2C2_Init+0x50>)
 80012aa:	f000 fe43 	bl	8001f34 <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012b4:	f000 f93c 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000e0 	.word	0x200000e0
 80012c0:	40005800 	.word	0x40005800
 80012c4:	000186a0 	.word	0x000186a0

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 80012f4:	4a2d      	ldr	r2, [pc, #180]	@ (80013ac <MX_TIM1_Init+0xe4>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 80012fa:	2247      	movs	r2, #71	@ 0x47
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 8001306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4822      	ldr	r0, [pc, #136]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 8001320:	f002 fa38 	bl	8003794 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800132a:	f000 f901 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001332:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4619      	mov	r1, r3
 800133a:	481b      	ldr	r0, [pc, #108]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 800133c:	f002 fd60 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001346:	f000 f8f3 	bl	8001530 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800134a:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 800134c:	f002 fa71 	bl	8003832 <HAL_TIM_IC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001356:	f000 f8eb 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 800136a:	f003 f8af 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001374:	f000 f8dc 	bl	8001530 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800137c:	2301      	movs	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM1_Init+0xe0>)
 8001390:	f002 fc9a 	bl	8003cc8 <HAL_TIM_IC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800139a:	f000 f8c9 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000134 	.word	0x20000134
 80013ac:	40012c00 	.word	0x40012c00

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013d6:	2247      	movs	r2, #71	@ 0x47
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013f4:	4816      	ldr	r0, [pc, #88]	@ (8001450 <MX_TIM2_Init+0xa0>)
 80013f6:	f002 fa1c 	bl	8003832 <HAL_TIM_IC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001400:	f000 f896 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	@ (8001450 <MX_TIM2_Init+0xa0>)
 8001414:	f003 f85a 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800141e:	f000 f887 	bl	8001530 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_TIM2_Init+0xa0>)
 800143a:	f002 fc45 	bl	8003cc8 <HAL_TIM_IC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001444:	f000 f874 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000017c 	.word	0x2000017c

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <MX_GPIO_Init+0xd0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a2d      	ldr	r2, [pc, #180]	@ (8001524 <MX_GPIO_Init+0xd0>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <MX_GPIO_Init+0xd0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <MX_GPIO_Init+0xd0>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <MX_GPIO_Init+0xd0>)
 8001486:	f043 0320 	orr.w	r3, r3, #32
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <MX_GPIO_Init+0xd0>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_GPIO_Init+0xd0>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <MX_GPIO_Init+0xd0>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_GPIO_Init+0xd0>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_GPIO_Init+0xd0>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <MX_GPIO_Init+0xd0>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_GPIO_Init+0xd0>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ce:	4816      	ldr	r0, [pc, #88]	@ (8001528 <MX_GPIO_Init+0xd4>)
 80014d0:	f000 fd18 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f240 2102 	movw	r1, #514	@ 0x202
 80014da:	4814      	ldr	r0, [pc, #80]	@ (800152c <MX_GPIO_Init+0xd8>)
 80014dc:	f000 fd12 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	480b      	ldr	r0, [pc, #44]	@ (8001528 <MX_GPIO_Init+0xd4>)
 80014fa:	f000 fb7f 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 80014fe:	f240 2302 	movw	r3, #514	@ 0x202
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_GPIO_Init+0xd8>)
 8001518:	f000 fb70 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	40011000 	.word	0x40011000
 800152c:	40010800 	.word	0x40010800

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <HAL_MspInit+0x5c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_MspInit+0x5c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_MspInit+0x60>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_MspInit+0x60>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001668 <HAL_I2C_MspInit+0xc8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d124      	bne.n	800160a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a29      	ldr	r2, [pc, #164]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d8:	23c0      	movs	r3, #192	@ 0xc0
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015dc:	2312      	movs	r3, #18
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4821      	ldr	r0, [pc, #132]	@ (8001670 <HAL_I2C_MspInit+0xd0>)
 80015ec:	f000 fb06 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015fa:	61d3      	str	r3, [r2, #28]
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001608:	e029      	b.n	800165e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_I2C_MspInit+0xd4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d124      	bne.n	800165e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800162c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2312      	movs	r3, #18
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <HAL_I2C_MspInit+0xd0>)
 8001642:	f000 fadb 	bl	8001bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 800164c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_I2C_MspInit+0xcc>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40005800 	.word	0x40005800

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_TIM_Base_MspInit+0x84>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d12c      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 800169e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_TIM_Base_MspInit+0x88>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <HAL_TIM_Base_MspInit+0x8c>)
 80016de:	f000 fa8d 	bl	8001bfc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	201b      	movs	r0, #27
 80016e8:	f000 fa51 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016ec:	201b      	movs	r0, #27
 80016ee:	f000 fa6a 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800

08001708 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001726:	d12b      	bne.n	8001780 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	61d3      	str	r3, [r2, #28]
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_TIM_IC_MspInit+0x80>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	@ (800178c <HAL_TIM_IC_MspInit+0x84>)
 800176c:	f000 fa46 	bl	8001bfc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	201c      	movs	r0, #28
 8001776:	f000 fa0a 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177a:	201c      	movs	r0, #28
 800177c:	f000 fa23 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	40010800 	.word	0x40010800

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f8be 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM1_CC_IRQHandler+0x10>)
 80017ee:	f002 f97b 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000134 	.word	0x20000134

080017fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM2_IRQHandler+0x10>)
 8001802:	f002 f971 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000017c 	.word	0x2000017c

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f002 fedc 	bl	80045fc <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20005000 	.word	0x20005000
 8001870:	00000400 	.word	0x00000400
 8001874:	200002bc 	.word	0x200002bc
 8001878:	20000410 	.word	0x20000410

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff fff8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480b      	ldr	r0, [pc, #44]	@ (80018bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188e:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a4:	4c09      	ldr	r4, [pc, #36]	@ (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 fea9 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7ff fbe9 	bl	800108c <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018c4:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 80018c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018cc:	2000040c 	.word	0x2000040c

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f947 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fe24 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f95f 	bl	8001be2 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f927 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	@ (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000004 	.word	0x20000004
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	@ (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000000c 	.word	0x2000000c
 8001980:	200002c0 	.word	0x200002c0

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	@ (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	200002c0 	.word	0x200002c0

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fff0 	bl	8001984 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffe0 	bl	8001984 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff2d 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff42 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff35 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	@ 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e169      	b.n	8001ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8158 	bne.w	8001ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a9a      	ldr	r2, [pc, #616]	@ (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a98      	ldr	r2, [pc, #608]	@ (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4a98      	ldr	r2, [pc, #608]	@ (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a96      	ldr	r2, [pc, #600]	@ (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a96      	ldr	r2, [pc, #600]	@ (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a94      	ldr	r2, [pc, #592]	@ (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a94      	ldr	r2, [pc, #592]	@ (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a92      	ldr	r2, [pc, #584]	@ (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a92      	ldr	r2, [pc, #584]	@ (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a90      	ldr	r2, [pc, #576]	@ (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a79      	ldr	r2, [pc, #484]	@ (8001eb0 <HAL_GPIO_Init+0x2b4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	@ 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b1 	beq.w	8001ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	@ (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3e      	ldr	r2, [pc, #248]	@ (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	@ (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	492c      	ldr	r1, [pc, #176]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4928      	ldr	r1, [pc, #160]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4922      	ldr	r1, [pc, #136]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	491e      	ldr	r1, [pc, #120]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4918      	ldr	r1, [pc, #96]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4914      	ldr	r1, [pc, #80]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	490e      	ldr	r1, [pc, #56]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x2e2>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_GPIO_Init+0x304>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <HAL_GPIO_Init+0x304>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae8e 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	@ 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e12b      	b.n	800219e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fb20 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	@ 0x24
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f98:	f001 fbca 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a81      	ldr	r2, [pc, #516]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d807      	bhi.n	8001fb8 <HAL_I2C_Init+0x84>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a80      	ldr	r2, [pc, #512]	@ (80021ac <HAL_I2C_Init+0x278>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x92>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a7d      	ldr	r2, [pc, #500]	@ (80021b0 <HAL_I2C_Init+0x27c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0e7      	b.n	800219e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a78      	ldr	r2, [pc, #480]	@ (80021b4 <HAL_I2C_Init+0x280>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_I2C_Init+0xd4>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	e009      	b.n	800201c <HAL_I2C_Init+0xe8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a69      	ldr	r2, [pc, #420]	@ (80021b8 <HAL_I2C_Init+0x284>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800202e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	495c      	ldr	r1, [pc, #368]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d819      	bhi.n	8002070 <HAL_I2C_Init+0x13c>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e59      	subs	r1, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	1c59      	adds	r1, r3, #1
 800204c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002050:	400b      	ands	r3, r1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_I2C_Init+0x138>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e59      	subs	r1, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fbb1 f3f3 	udiv	r3, r1, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206a:	e051      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 800206c:	2304      	movs	r3, #4
 800206e:	e04f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d111      	bne.n	800209c <HAL_I2C_Init+0x168>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e012      	b.n	80020c2 <HAL_I2C_Init+0x18e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x196>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e022      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_Init+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e58      	subs	r0, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	440b      	add	r3, r1
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	6809      	ldr	r1, [r1, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800213e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6911      	ldr	r1, [r2, #16]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	000186a0 	.word	0x000186a0
 80021ac:	001e847f 	.word	0x001e847f
 80021b0:	003d08ff 	.word	0x003d08ff
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	460b      	mov	r3, r1
 80021ca:	817b      	strh	r3, [r7, #10]
 80021cc:	4613      	mov	r3, r2
 80021ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fbd8 	bl	8001984 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	f040 80e0 	bne.w	80023a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2319      	movs	r3, #25
 80021ea:	2201      	movs	r2, #1
 80021ec:	4970      	ldr	r1, [pc, #448]	@ (80023b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc9e 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0d3      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Master_Transmit+0x50>
 8002208:	2302      	movs	r3, #2
 800220a:	e0cc      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d007      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a50      	ldr	r2, [pc, #320]	@ (80023b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb08 	bl	8002890 <I2C_MasterRequestWrite>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e08d      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022a0:	e066      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fd5c 	bl	8002d64 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d11b      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x188>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6a39      	ldr	r1, [r7, #32]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fd53 	bl	8002df4 <I2C_WaitOnBTFFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e01a      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d194      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00100002 	.word	0x00100002
 80023b4:	ffff0000 	.word	0xffff0000

080023b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	@ 0x30
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fad8 	bl	8001984 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 824b 	bne.w	800287a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	497f      	ldr	r1, [pc, #508]	@ (80025ec <HAL_I2C_Master_Receive+0x234>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fb9e 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	e23e      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2C_Master_Receive+0x54>
 8002408:	2302      	movs	r3, #2
 800240a:	e237      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d007      	beq.n	8002432 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2222      	movs	r2, #34	@ 0x22
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a5f      	ldr	r2, [pc, #380]	@ (80025f0 <HAL_I2C_Master_Receive+0x238>)
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002474:	8979      	ldrh	r1, [r7, #10]
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fa8a 	bl	8002994 <I2C_MasterRequestRead>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1f8      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	d113      	bne.n	80024ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e1cc      	b.n	8002854 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d11e      	bne.n	8002500 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024d2:	b672      	cpsid	i
}
 80024d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024fc:	b662      	cpsie	i
}
 80024fe:	e035      	b.n	800256c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	2b02      	cmp	r3, #2
 8002506:	d11e      	bne.n	8002546 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002516:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002542:	b662      	cpsie	i
}
 8002544:	e012      	b.n	800256c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800256c:	e172      	b.n	8002854 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	2b03      	cmp	r3, #3
 8002574:	f200 811f 	bhi.w	80027b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257c:	2b01      	cmp	r3, #1
 800257e:	d123      	bne.n	80025c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002582:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fc7d 	bl	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e173      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025c6:	e145      	b.n	8002854 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d152      	bne.n	8002676 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	4906      	ldr	r1, [pc, #24]	@ (80025f4 <HAL_I2C_Master_Receive+0x23c>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 faa8 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e148      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
 80025ea:	bf00      	nop
 80025ec:	00100002 	.word	0x00100002
 80025f0:	ffff0000 	.word	0xffff0000
 80025f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800263e:	b662      	cpsie	i
}
 8002640:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002674:	e0ee      	b.n	8002854 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	2200      	movs	r2, #0
 800267e:	4981      	ldr	r1, [pc, #516]	@ (8002884 <HAL_I2C_Master_Receive+0x4cc>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa55 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0f5      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_I2C_Master_Receive+0x4d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	08db      	lsrs	r3, r3, #3
 80026dc:	4a6b      	ldr	r2, [pc, #428]	@ (800288c <HAL_I2C_Master_Receive+0x4d4>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a1a      	lsrs	r2, r3, #8
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00da      	lsls	r2, r3, #3
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d118      	bne.n	800272e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800271e:	b662      	cpsie	i
}
 8002720:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0a6      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d1d9      	bne.n	80026f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800277e:	b662      	cpsie	i
}
 8002780:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b4:	e04e      	b.n	8002854 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fb62 	bl	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e058      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d124      	bne.n	8002854 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	2b03      	cmp	r3, #3
 8002810:	d107      	bne.n	8002822 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002820:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	f47f ae88 	bne.w	800256e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	@ 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	00010004 	.word	0x00010004
 8002888:	20000004 	.word	0x20000004
 800288c:	14f8b589 	.word	0x14f8b589

08002890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d006      	beq.n	80028ba <I2C_MasterRequestWrite+0x2a>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d003      	beq.n	80028ba <I2C_MasterRequestWrite+0x2a>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028b8:	d108      	bne.n	80028cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00b      	b.n	80028e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	2b12      	cmp	r3, #18
 80028d2:	d107      	bne.n	80028e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f91d 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800290a:	d103      	bne.n	8002914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e035      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002920:	d108      	bne.n	8002934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	e01b      	b.n	800296c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	11db      	asrs	r3, r3, #7
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0306 	and.w	r3, r3, #6
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f063 030f 	orn	r3, r3, #15
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	490e      	ldr	r1, [pc, #56]	@ (800298c <I2C_MasterRequestWrite+0xfc>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f966 	bl	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e010      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4907      	ldr	r1, [pc, #28]	@ (8002990 <I2C_MasterRequestWrite+0x100>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f956 	bl	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	00010008 	.word	0x00010008
 8002990:	00010002 	.word	0x00010002

08002994 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d006      	beq.n	80029ce <I2C_MasterRequestRead+0x3a>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <I2C_MasterRequestRead+0x3a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d107      	bne.n	80029f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f893 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e079      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e05f      	b.n	8002b08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4930      	ldr	r1, [pc, #192]	@ (8002b28 <I2C_MasterRequestRead+0x194>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f8dc 	bl	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e054      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4929      	ldr	r1, [pc, #164]	@ (8002b2c <I2C_MasterRequestRead+0x198>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f8cc 	bl	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e044      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f831 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae2:	d103      	bne.n	8002aec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e017      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	11db      	asrs	r3, r3, #7
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0306 	and.w	r3, r3, #6
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f063 030e 	orn	r3, r3, #14
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <I2C_MasterRequestRead+0x198>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f888 	bl	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b40:	e048      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d044      	beq.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe ff1b 	bl	8001984 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d139      	bne.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	e00c      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d116      	bne.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e023      	b.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10d      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	e00c      	b.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d093      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c32:	e071      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c42:	d123      	bne.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e067      	b.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d041      	beq.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c94:	f7fe fe76 	bl	8001984 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d302      	bcc.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d136      	bne.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	e00b      	b.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e021      	b.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10c      	bne.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e00b      	b.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f af6d 	bne.w	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d70:	e034      	b.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f8e3 	bl	8002f3e <I2C_IsAcknowledgeFailed>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e034      	b.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d028      	beq.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fe fdfb 	bl	8001984 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11d      	bne.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b80      	cmp	r3, #128	@ 0x80
 8002dac:	d016      	beq.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e007      	b.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b80      	cmp	r3, #128	@ 0x80
 8002de8:	d1c3      	bne.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e00:	e034      	b.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f89b 	bl	8002f3e <I2C_IsAcknowledgeFailed>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e034      	b.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d028      	beq.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe fdb3 	bl	8001984 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11d      	bne.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d016      	beq.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e007      	b.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d1c3      	bne.n	8002e02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e90:	e049      	b.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d119      	bne.n	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0210 	mvn.w	r2, #16
 8002ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e030      	b.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed4:	f7fe fd56 	bl	8001984 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d302      	bcc.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11d      	bne.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d016      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e007      	b.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b40      	cmp	r3, #64	@ 0x40
 8002f32:	d1ae      	bne.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f54:	d11b      	bne.n	8002f8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f043 0204 	orr.w	r2, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e272      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8087 	beq.w	80030ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d112      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe2:	4b89      	ldr	r3, [pc, #548]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d06c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x12c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d168      	bne.n	80030c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e24c      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x76>
 8003004:	4b80      	ldr	r3, [pc, #512]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7f      	ldr	r2, [pc, #508]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e02e      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x98>
 800301a:	4b7b      	ldr	r3, [pc, #492]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7a      	ldr	r2, [pc, #488]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b78      	ldr	r3, [pc, #480]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a77      	ldr	r2, [pc, #476]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0xbc>
 800303e:	4b72      	ldr	r3, [pc, #456]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a71      	ldr	r2, [pc, #452]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6f      	ldr	r3, [pc, #444]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6e      	ldr	r2, [pc, #440]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003058:	4b6b      	ldr	r3, [pc, #428]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6a      	ldr	r2, [pc, #424]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b68      	ldr	r3, [pc, #416]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a67      	ldr	r2, [pc, #412]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800306e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fc84 	bl	8001984 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe fc80 	bl	8001984 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	@ 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e200      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xe4>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fc70 	bl	8001984 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fc6c 	bl	8001984 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	@ 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1ec      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x10c>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e2:	4b49      	ldr	r3, [pc, #292]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
 80030ee:	4b46      	ldr	r3, [pc, #280]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b43      	ldr	r3, [pc, #268]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c0      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3d      	ldr	r3, [pc, #244]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4939      	ldr	r1, [pc, #228]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fc25 	bl	8001984 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fc21 	bl	8001984 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2d      	ldr	r3, [pc, #180]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b2a      	ldr	r3, [pc, #168]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4927      	ldr	r1, [pc, #156]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b26      	ldr	r3, [pc, #152]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fc04 	bl	8001984 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7fe fc00 	bl	8001984 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e180      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03a      	beq.n	8003220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <HAL_RCC_OscConfig+0x274>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fbe4 	bl	8001984 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fe fbe0 	bl	8001984 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e160      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 faba 	bl	8003758 <RCC_Delay>
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_RCC_OscConfig+0x274>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fbca 	bl	8001984 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fbc6 	bl	8001984 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d908      	bls.n	8003214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e146      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	42420000 	.word	0x42420000
 8003210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b92      	ldr	r3, [pc, #584]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e9      	bne.n	80031f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b8b      	ldr	r3, [pc, #556]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b88      	ldr	r3, [pc, #544]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a87      	ldr	r2, [pc, #540]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b85      	ldr	r3, [pc, #532]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b82      	ldr	r3, [pc, #520]	@ (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d118      	bne.n	8003298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b7f      	ldr	r3, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x4c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7e      	ldr	r2, [pc, #504]	@ (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7fe fb87 	bl	8001984 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327a:	f7fe fb83 	bl	8001984 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	@ 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e103      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b75      	ldr	r3, [pc, #468]	@ (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x312>
 80032a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e02d      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x334>
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a69      	ldr	r2, [pc, #420]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6213      	str	r3, [r2, #32]
 80032c2:	4b67      	ldr	r3, [pc, #412]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a66      	ldr	r2, [pc, #408]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x356>
 80032d8:	4b61      	ldr	r3, [pc, #388]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4a60      	ldr	r2, [pc, #384]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6213      	str	r3, [r2, #32]
 80032e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a57      	ldr	r2, [pc, #348]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fb37 	bl	8001984 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fb33 	bl	8001984 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0b1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b4b      	ldr	r3, [pc, #300]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x37e>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fb21 	bl	8001984 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe fb1d 	bl	8001984 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e09b      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b40      	ldr	r3, [pc, #256]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a3b      	ldr	r2, [pc, #236]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d061      	beq.n	8003454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d146      	bne.n	8003426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b33      	ldr	r3, [pc, #204]	@ (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe faf1 	bl	8001984 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe faed 	bl	8001984 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e06d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ce:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4921      	ldr	r1, [pc, #132]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	430b      	orrs	r3, r1
 80033f2:	491b      	ldr	r1, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fac1 	bl	8001984 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fabd 	bl	8001984 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x46a>
 8003424:	e035      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe faaa 	bl	8001984 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe faa6 	bl	8001984 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e026      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x498>
 8003452:	e01e      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e019      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_OscConfig+0x500>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	429a      	cmp	r2, r3
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4965      	ldr	r1, [pc, #404]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a58      	ldr	r2, [pc, #352]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a52      	ldr	r2, [pc, #328]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800351e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe f9f8 	bl	8001984 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe f9f4 	bl	8001984 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	4922      	ldr	r1, [pc, #136]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	@ (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_RCC_ClockConfig+0x1d0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f956 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	08004f54 	.word	0x08004f54
 800366c:	20000004 	.word	0x20000004
 8003670:	20000008 	.word	0x20000008

08003674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800368e:	4b1e      	ldr	r3, [pc, #120]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x30>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x36>
 80036a2:	e027      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036a6:	613b      	str	r3, [r7, #16]
      break;
 80036a8:	e027      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036c2:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0c5b      	lsrs	r3, r3, #17
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	@ (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036d6:	fb03 f202 	mul.w	r2, r3, r2
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e004      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	613b      	str	r3, [r7, #16]
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036f6:	613b      	str	r3, [r7, #16]
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	693b      	ldr	r3, [r7, #16]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	007a1200 	.word	0x007a1200
 8003710:	08004f6c 	.word	0x08004f6c
 8003714:	08004f7c 	.word	0x08004f7c
 8003718:	003d0900 	.word	0x003d0900

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b02      	ldr	r3, [pc, #8]	@ (800372c <HAL_RCC_GetHCLKFreq+0x10>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003734:	f7ff fff2 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4903      	ldr	r1, [pc, #12]	@ (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08004f64 	.word	0x08004f64

08003758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003760:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <RCC_Delay+0x34>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <RCC_Delay+0x38>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a5b      	lsrs	r3, r3, #9
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003774:	bf00      	nop
  }
  while (Delay --);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	60fa      	str	r2, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <RCC_Delay+0x1c>
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000004 	.word	0x20000004
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e041      	b.n	800382a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd ff5c 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f000 fc44 	bl	8004060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e041      	b.n	80038c8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd ff55 	bl	8001708 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f000 fbf5 	bl	8004060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x1e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e013      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x46>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0x2e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x46>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_IC_Start_IT+0x3e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e003      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x46>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_TIM_IC_Start_IT+0x58>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e013      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x80>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d104      	bne.n	8003938 <HAL_TIM_IC_Start_IT+0x68>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e00b      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x80>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d104      	bne.n	8003948 <HAL_TIM_IC_Start_IT+0x78>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e003      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x80>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800394e:	b2db      	uxtb	r3, r3
 8003950:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	7bbb      	ldrb	r3, [r7, #14]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003958:	7b7b      	ldrb	r3, [r7, #13]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0b8      	b.n	8003ad4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Start_IT+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	e013      	b.n	800399a <HAL_TIM_IC_Start_IT+0xca>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xb2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003980:	e00b      	b.n	800399a <HAL_TIM_IC_Start_IT+0xca>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xc2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003990:	e003      	b.n	800399a <HAL_TIM_IC_Start_IT+0xca>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0xda>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x102>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0xea>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x102>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0xfa>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x102>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d841      	bhi.n	8003a5c <HAL_TIM_IC_Start_IT+0x18c>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_TIM_IC_Start_IT+0x110>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a5d 	.word	0x08003a5d
 80039e8:	08003a5d 	.word	0x08003a5d
 80039ec:	08003a5d 	.word	0x08003a5d
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	08003a5d 	.word	0x08003a5d
 80039fc:	08003a5d 	.word	0x08003a5d
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a4b 	.word	0x08003a4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0202 	orr.w	r2, r2, #2
 8003a22:	60da      	str	r2, [r3, #12]
      break;
 8003a24:	e01d      	b.n	8003a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	60da      	str	r2, [r3, #12]
      break;
 8003a36:	e014      	b.n	8003a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	60da      	str	r2, [r3, #12]
      break;
 8003a48:	e00b      	b.n	8003a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0210 	orr.w	r2, r2, #16
 8003a58:	60da      	str	r2, [r3, #12]
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d134      	bne.n	8003ad2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fd06 	bl	8004482 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_TIM_IC_Start_IT+0x20c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1ce>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d009      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1ce>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <HAL_TIM_IC_Start_IT+0x210>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1ce>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <HAL_TIM_IC_Start_IT+0x214>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d010      	beq.n	8003ad2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	e007      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800

08003ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d020      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0202 	mvn.w	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd f8a8 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa75 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fa7b 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0204 	mvn.w	r2, #4
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd f882 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa4f 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa55 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0208 	mvn.w	r2, #8
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f85c 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa29 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa2f 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd f836 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa03 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa09 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0201 	mvn.w	r2, #1
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9e2 	bl	8004018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fc91 	bl	800459a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9d9 	bl	800404e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0220 	mvn.w	r2, #32
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fc64 	bl	8004588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e088      	b.n	8003df8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d04:	f000 fa1a 	bl	800413c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020c 	bic.w	r2, r2, #12
 8003d16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
 8003d2a:	e060      	b.n	8003dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d11c      	bne.n	8003d6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d42:	f000 fa83 	bl	800424c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6999      	ldr	r1, [r3, #24]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	021a      	lsls	r2, r3, #8
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
 8003d6a:	e040      	b.n	8003dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11b      	bne.n	8003daa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d82:	f000 face 	bl	8004322 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 020c 	bic.w	r2, r2, #12
 8003d94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69d9      	ldr	r1, [r3, #28]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]
 8003da8:	e021      	b.n	8003dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	d11c      	bne.n	8003dea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003dc0:	f000 faea 	bl	8004398 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69d9      	ldr	r1, [r3, #28]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	021a      	lsls	r2, r3, #8
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
 8003de8:	e001      	b.n	8003dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x1c>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0b4      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x186>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d03e      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5a:	f200 8087 	bhi.w	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	f000 8086 	beq.w	8003f72 <HAL_TIM_ConfigClockSource+0x172>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d87f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b70      	cmp	r3, #112	@ 0x70
 8003e6e:	d01a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e70:	2b70      	cmp	r3, #112	@ 0x70
 8003e72:	d87b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b60      	cmp	r3, #96	@ 0x60
 8003e76:	d050      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x11a>
 8003e78:	2b60      	cmp	r3, #96	@ 0x60
 8003e7a:	d877      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b50      	cmp	r3, #80	@ 0x50
 8003e7e:	d03c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xfa>
 8003e80:	2b50      	cmp	r3, #80	@ 0x50
 8003e82:	d873      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	d058      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x13a>
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d86f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d064      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d86b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d060      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d867      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05c      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d05a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	e062      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	f000 fac5 	bl	8004444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	609a      	str	r2, [r3, #8]
      break;
 8003ed2:	e04f      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	f000 faae 	bl	8004444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ef6:	609a      	str	r2, [r3, #8]
      break;
 8003ef8:	e03c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 f972 	bl	80041f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2150      	movs	r1, #80	@ 0x50
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa7c 	bl	8004410 <TIM_ITRx_SetConfig>
      break;
 8003f18:	e02c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 f9cc 	bl	80042c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2160      	movs	r1, #96	@ 0x60
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa6c 	bl	8004410 <TIM_ITRx_SetConfig>
      break;
 8003f38:	e01c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 f952 	bl	80041f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	@ 0x40
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fa5c 	bl	8004410 <TIM_ITRx_SetConfig>
      break;
 8003f58:	e00c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 fa53 	bl	8004410 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e003      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	e000      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d831      	bhi.n	8004008 <HAL_TIM_ReadCapturedValue+0x78>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08004009 	.word	0x08004009
 8003fc4:	08004009 	.word	0x08004009
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08003ff5 	.word	0x08003ff5
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08003fff 	.word	0x08003fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	60fb      	str	r3, [r7, #12]

      break;
 8003fe8:	e00f      	b.n	800400a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	60fb      	str	r3, [r7, #12]

      break;
 8003ff2:	e00a      	b.n	800400a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	60fb      	str	r3, [r7, #12]

      break;
 8003ffc:	e005      	b.n	800400a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	60fb      	str	r3, [r7, #12]

      break;
 8004006:	e000      	b.n	800400a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004008:	bf00      	nop
  }

  return tmpreg;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a2f      	ldr	r2, [pc, #188]	@ (8004130 <TIM_Base_SetConfig+0xd0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <TIM_Base_SetConfig+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2b      	ldr	r2, [pc, #172]	@ (8004138 <TIM_Base_SetConfig+0xd8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a22      	ldr	r2, [pc, #136]	@ (8004130 <TIM_Base_SetConfig+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d007      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004134 <TIM_Base_SetConfig+0xd4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004138 <TIM_Base_SetConfig+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d108      	bne.n	80040d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <TIM_Base_SetConfig+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d103      	bne.n	8004108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]
  }
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f023 0201 	bic.w	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a1f      	ldr	r2, [pc, #124]	@ (80041e4 <TIM_TI1_SetConfig+0xa8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_TI1_SetConfig+0x46>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d007      	beq.n	8004182 <TIM_TI1_SetConfig+0x46>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a1c      	ldr	r2, [pc, #112]	@ (80041e8 <TIM_TI1_SetConfig+0xac>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_TI1_SetConfig+0x46>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <TIM_TI1_SetConfig+0xb0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <TIM_TI1_SetConfig+0x4a>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <TIM_TI1_SetConfig+0x4c>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e003      	b.n	80041a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 030a 	and.w	r3, r3, #10
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800

080041f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 030a 	bic.w	r3, r3, #10
 800422c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f023 0210 	bic.w	r2, r3, #16
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	031b      	lsls	r3, r3, #12
 8004290:	b29b      	uxth	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800429e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0210 	bic.w	r2, r3, #16
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	031b      	lsls	r3, r3, #12
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800435e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	b2db      	uxtb	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004372:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	031b      	lsls	r3, r3, #12
 80043dc:	b29b      	uxth	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	031b      	lsls	r3, r3, #12
 80043f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	f043 0307 	orr.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	609a      	str	r2, [r3, #8]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800445e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	021a      	lsls	r2, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	431a      	orrs	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2201      	movs	r2, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e046      	b.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a16      	ldr	r2, [pc, #88]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004530:	d009      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800

08004588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <siprintf>:
 80045ac:	b40e      	push	{r1, r2, r3}
 80045ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045b2:	b500      	push	{lr}
 80045b4:	b09c      	sub	sp, #112	@ 0x70
 80045b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80045b8:	9002      	str	r0, [sp, #8]
 80045ba:	9006      	str	r0, [sp, #24]
 80045bc:	9107      	str	r1, [sp, #28]
 80045be:	9104      	str	r1, [sp, #16]
 80045c0:	4808      	ldr	r0, [pc, #32]	@ (80045e4 <siprintf+0x38>)
 80045c2:	4909      	ldr	r1, [pc, #36]	@ (80045e8 <siprintf+0x3c>)
 80045c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c8:	9105      	str	r1, [sp, #20]
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	a902      	add	r1, sp, #8
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	f000 f992 	bl	80048f8 <_svfiprintf_r>
 80045d4:	2200      	movs	r2, #0
 80045d6:	9b02      	ldr	r3, [sp, #8]
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	b01c      	add	sp, #112	@ 0x70
 80045dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e0:	b003      	add	sp, #12
 80045e2:	4770      	bx	lr
 80045e4:	20000010 	.word	0x20000010
 80045e8:	ffff0208 	.word	0xffff0208

080045ec <memset>:
 80045ec:	4603      	mov	r3, r0
 80045ee:	4402      	add	r2, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	@ (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000010 	.word	0x20000010

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	2600      	movs	r6, #0
 800460c:	4d0c      	ldr	r5, [pc, #48]	@ (8004640 <__libc_init_array+0x38>)
 800460e:	4c0d      	ldr	r4, [pc, #52]	@ (8004644 <__libc_init_array+0x3c>)
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	f000 fc78 	bl	8004f0c <_init>
 800461c:	2600      	movs	r6, #0
 800461e:	4d0a      	ldr	r5, [pc, #40]	@ (8004648 <__libc_init_array+0x40>)
 8004620:	4c0a      	ldr	r4, [pc, #40]	@ (800464c <__libc_init_array+0x44>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08004fbc 	.word	0x08004fbc
 8004644:	08004fbc 	.word	0x08004fbc
 8004648:	08004fbc 	.word	0x08004fbc
 800464c:	08004fc0 	.word	0x08004fc0

08004650 <__retarget_lock_acquire_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_release_recursive>:
 8004652:	4770      	bx	lr

08004654 <_free_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	d040      	beq.n	80046de <_free_r+0x8a>
 800465c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004660:	1f0c      	subs	r4, r1, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfb8      	it	lt
 8004666:	18e4      	addlt	r4, r4, r3
 8004668:	f000 f8de 	bl	8004828 <__malloc_lock>
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <_free_r+0x8c>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	b933      	cbnz	r3, 8004680 <_free_r+0x2c>
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	6014      	str	r4, [r2, #0]
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467c:	f000 b8da 	b.w	8004834 <__malloc_unlock>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d908      	bls.n	8004696 <_free_r+0x42>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf01      	itttt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	1809      	addeq	r1, r1, r0
 8004692:	6021      	streq	r1, [r4, #0]
 8004694:	e7ed      	b.n	8004672 <_free_r+0x1e>
 8004696:	461a      	mov	r2, r3
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b10b      	cbz	r3, 80046a0 <_free_r+0x4c>
 800469c:	42a3      	cmp	r3, r4
 800469e:	d9fa      	bls.n	8004696 <_free_r+0x42>
 80046a0:	6811      	ldr	r1, [r2, #0]
 80046a2:	1850      	adds	r0, r2, r1
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d10b      	bne.n	80046c0 <_free_r+0x6c>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	4401      	add	r1, r0
 80046ac:	1850      	adds	r0, r2, r1
 80046ae:	4283      	cmp	r3, r0
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	d1e0      	bne.n	8004676 <_free_r+0x22>
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4408      	add	r0, r1
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	6053      	str	r3, [r2, #4]
 80046be:	e7da      	b.n	8004676 <_free_r+0x22>
 80046c0:	d902      	bls.n	80046c8 <_free_r+0x74>
 80046c2:	230c      	movs	r3, #12
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	e7d6      	b.n	8004676 <_free_r+0x22>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf01      	itttt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6054      	str	r4, [r2, #4]
 80046dc:	e7cb      	b.n	8004676 <_free_r+0x22>
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000408 	.word	0x20000408

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004724 <sbrk_aligned+0x40>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	6831      	ldr	r1, [r6, #0]
 80046ec:	4605      	mov	r5, r0
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fbaa 	bl	8004e48 <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fba5 	bl	8004e48 <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d103      	bne.n	800470a <sbrk_aligned+0x26>
 8004702:	f04f 34ff 	mov.w	r4, #4294967295
 8004706:	4620      	mov	r0, r4
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0f8      	beq.n	8004706 <sbrk_aligned+0x22>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4628      	mov	r0, r5
 8004718:	f000 fb96 	bl	8004e48 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1f2      	bne.n	8004706 <sbrk_aligned+0x22>
 8004720:	e7ef      	b.n	8004702 <sbrk_aligned+0x1e>
 8004722:	bf00      	nop
 8004724:	20000404 	.word	0x20000404

08004728 <_malloc_r>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	1ccd      	adds	r5, r1, #3
 800472e:	f025 0503 	bic.w	r5, r5, #3
 8004732:	3508      	adds	r5, #8
 8004734:	2d0c      	cmp	r5, #12
 8004736:	bf38      	it	cc
 8004738:	250c      	movcc	r5, #12
 800473a:	2d00      	cmp	r5, #0
 800473c:	4606      	mov	r6, r0
 800473e:	db01      	blt.n	8004744 <_malloc_r+0x1c>
 8004740:	42a9      	cmp	r1, r5
 8004742:	d904      	bls.n	800474e <_malloc_r+0x26>
 8004744:	230c      	movs	r3, #12
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004824 <_malloc_r+0xfc>
 8004752:	f000 f869 	bl	8004828 <__malloc_lock>
 8004756:	f8d8 3000 	ldr.w	r3, [r8]
 800475a:	461c      	mov	r4, r3
 800475c:	bb44      	cbnz	r4, 80047b0 <_malloc_r+0x88>
 800475e:	4629      	mov	r1, r5
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffbf 	bl	80046e4 <sbrk_aligned>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	4604      	mov	r4, r0
 800476a:	d158      	bne.n	800481e <_malloc_r+0xf6>
 800476c:	f8d8 4000 	ldr.w	r4, [r8]
 8004770:	4627      	mov	r7, r4
 8004772:	2f00      	cmp	r7, #0
 8004774:	d143      	bne.n	80047fe <_malloc_r+0xd6>
 8004776:	2c00      	cmp	r4, #0
 8004778:	d04b      	beq.n	8004812 <_malloc_r+0xea>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4639      	mov	r1, r7
 800477e:	4630      	mov	r0, r6
 8004780:	eb04 0903 	add.w	r9, r4, r3
 8004784:	f000 fb60 	bl	8004e48 <_sbrk_r>
 8004788:	4581      	cmp	r9, r0
 800478a:	d142      	bne.n	8004812 <_malloc_r+0xea>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff ffa6 	bl	80046e4 <sbrk_aligned>
 8004798:	3001      	adds	r0, #1
 800479a:	d03a      	beq.n	8004812 <_malloc_r+0xea>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	442b      	add	r3, r5
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	f8d8 3000 	ldr.w	r3, [r8]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	bb62      	cbnz	r2, 8004804 <_malloc_r+0xdc>
 80047aa:	f8c8 7000 	str.w	r7, [r8]
 80047ae:	e00f      	b.n	80047d0 <_malloc_r+0xa8>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	1b52      	subs	r2, r2, r5
 80047b4:	d420      	bmi.n	80047f8 <_malloc_r+0xd0>
 80047b6:	2a0b      	cmp	r2, #11
 80047b8:	d917      	bls.n	80047ea <_malloc_r+0xc2>
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	42a3      	cmp	r3, r4
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	6059      	strne	r1, [r3, #4]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	bf08      	it	eq
 80047c8:	f8c8 1000 	streq.w	r1, [r8]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f82f 	bl	8004834 <__malloc_unlock>
 80047d6:	f104 000b 	add.w	r0, r4, #11
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	f020 0007 	bic.w	r0, r0, #7
 80047e0:	1ac2      	subs	r2, r0, r3
 80047e2:	bf1c      	itt	ne
 80047e4:	1a1b      	subne	r3, r3, r0
 80047e6:	50a3      	strne	r3, [r4, r2]
 80047e8:	e7af      	b.n	800474a <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	f8c8 2000 	streq.w	r2, [r8]
 80047f4:	605a      	strne	r2, [r3, #4]
 80047f6:	e7eb      	b.n	80047d0 <_malloc_r+0xa8>
 80047f8:	4623      	mov	r3, r4
 80047fa:	6864      	ldr	r4, [r4, #4]
 80047fc:	e7ae      	b.n	800475c <_malloc_r+0x34>
 80047fe:	463c      	mov	r4, r7
 8004800:	687f      	ldr	r7, [r7, #4]
 8004802:	e7b6      	b.n	8004772 <_malloc_r+0x4a>
 8004804:	461a      	mov	r2, r3
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	d1fb      	bne.n	8004804 <_malloc_r+0xdc>
 800480c:	2300      	movs	r3, #0
 800480e:	6053      	str	r3, [r2, #4]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa8>
 8004812:	230c      	movs	r3, #12
 8004814:	4630      	mov	r0, r6
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f000 f80c 	bl	8004834 <__malloc_unlock>
 800481c:	e794      	b.n	8004748 <_malloc_r+0x20>
 800481e:	6005      	str	r5, [r0, #0]
 8004820:	e7d6      	b.n	80047d0 <_malloc_r+0xa8>
 8004822:	bf00      	nop
 8004824:	20000408 	.word	0x20000408

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	@ (8004830 <__malloc_lock+0x8>)
 800482a:	f7ff bf11 	b.w	8004650 <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	20000400 	.word	0x20000400

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	@ (800483c <__malloc_unlock+0x8>)
 8004836:	f7ff bf0c 	b.w	8004652 <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	20000400 	.word	0x20000400

08004840 <__ssputs_r>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	461f      	mov	r7, r3
 8004846:	688e      	ldr	r6, [r1, #8]
 8004848:	4682      	mov	sl, r0
 800484a:	42be      	cmp	r6, r7
 800484c:	460c      	mov	r4, r1
 800484e:	4690      	mov	r8, r2
 8004850:	680b      	ldr	r3, [r1, #0]
 8004852:	d82d      	bhi.n	80048b0 <__ssputs_r+0x70>
 8004854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800485c:	d026      	beq.n	80048ac <__ssputs_r+0x6c>
 800485e:	6965      	ldr	r5, [r4, #20]
 8004860:	6909      	ldr	r1, [r1, #16]
 8004862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004866:	eba3 0901 	sub.w	r9, r3, r1
 800486a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800486e:	1c7b      	adds	r3, r7, #1
 8004870:	444b      	add	r3, r9
 8004872:	106d      	asrs	r5, r5, #1
 8004874:	429d      	cmp	r5, r3
 8004876:	bf38      	it	cc
 8004878:	461d      	movcc	r5, r3
 800487a:	0553      	lsls	r3, r2, #21
 800487c:	d527      	bpl.n	80048ce <__ssputs_r+0x8e>
 800487e:	4629      	mov	r1, r5
 8004880:	f7ff ff52 	bl	8004728 <_malloc_r>
 8004884:	4606      	mov	r6, r0
 8004886:	b360      	cbz	r0, 80048e2 <__ssputs_r+0xa2>
 8004888:	464a      	mov	r2, r9
 800488a:	6921      	ldr	r1, [r4, #16]
 800488c:	f000 fafa 	bl	8004e84 <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	444e      	add	r6, r9
 80048a0:	6026      	str	r6, [r4, #0]
 80048a2:	463e      	mov	r6, r7
 80048a4:	6165      	str	r5, [r4, #20]
 80048a6:	eba5 0509 	sub.w	r5, r5, r9
 80048aa:	60a5      	str	r5, [r4, #8]
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d900      	bls.n	80048b2 <__ssputs_r+0x72>
 80048b0:	463e      	mov	r6, r7
 80048b2:	4632      	mov	r2, r6
 80048b4:	4641      	mov	r1, r8
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	f000 faac 	bl	8004e14 <memmove>
 80048bc:	2000      	movs	r0, #0
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	4433      	add	r3, r6
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	462a      	mov	r2, r5
 80048d0:	f000 fae6 	bl	8004ea0 <_realloc_r>
 80048d4:	4606      	mov	r6, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d1e0      	bne.n	800489c <__ssputs_r+0x5c>
 80048da:	4650      	mov	r0, sl
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	f7ff feb9 	bl	8004654 <_free_r>
 80048e2:	230c      	movs	r3, #12
 80048e4:	f8ca 3000 	str.w	r3, [sl]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	e7e9      	b.n	80048ca <__ssputs_r+0x8a>
	...

080048f8 <_svfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4698      	mov	r8, r3
 80048fe:	898b      	ldrh	r3, [r1, #12]
 8004900:	4607      	mov	r7, r0
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	460d      	mov	r5, r1
 8004906:	4614      	mov	r4, r2
 8004908:	b09d      	sub	sp, #116	@ 0x74
 800490a:	d510      	bpl.n	800492e <_svfiprintf_r+0x36>
 800490c:	690b      	ldr	r3, [r1, #16]
 800490e:	b973      	cbnz	r3, 800492e <_svfiprintf_r+0x36>
 8004910:	2140      	movs	r1, #64	@ 0x40
 8004912:	f7ff ff09 	bl	8004728 <_malloc_r>
 8004916:	6028      	str	r0, [r5, #0]
 8004918:	6128      	str	r0, [r5, #16]
 800491a:	b930      	cbnz	r0, 800492a <_svfiprintf_r+0x32>
 800491c:	230c      	movs	r3, #12
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b01d      	add	sp, #116	@ 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	616b      	str	r3, [r5, #20]
 800492e:	2300      	movs	r3, #0
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
 8004932:	2320      	movs	r3, #32
 8004934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004938:	2330      	movs	r3, #48	@ 0x30
 800493a:	f04f 0901 	mov.w	r9, #1
 800493e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004942:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004adc <_svfiprintf_r+0x1e4>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494a:	4623      	mov	r3, r4
 800494c:	469a      	mov	sl, r3
 800494e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004952:	b10a      	cbz	r2, 8004958 <_svfiprintf_r+0x60>
 8004954:	2a25      	cmp	r2, #37	@ 0x25
 8004956:	d1f9      	bne.n	800494c <_svfiprintf_r+0x54>
 8004958:	ebba 0b04 	subs.w	fp, sl, r4
 800495c:	d00b      	beq.n	8004976 <_svfiprintf_r+0x7e>
 800495e:	465b      	mov	r3, fp
 8004960:	4622      	mov	r2, r4
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ff6b 	bl	8004840 <__ssputs_r>
 800496a:	3001      	adds	r0, #1
 800496c:	f000 80a7 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004972:	445a      	add	r2, fp
 8004974:	9209      	str	r2, [sp, #36]	@ 0x24
 8004976:	f89a 3000 	ldrb.w	r3, [sl]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 809f 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004980:	2300      	movs	r3, #0
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498a:	f10a 0a01 	add.w	sl, sl, #1
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	9307      	str	r3, [sp, #28]
 8004992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004996:	931a      	str	r3, [sp, #104]	@ 0x68
 8004998:	4654      	mov	r4, sl
 800499a:	2205      	movs	r2, #5
 800499c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a0:	484e      	ldr	r0, [pc, #312]	@ (8004adc <_svfiprintf_r+0x1e4>)
 80049a2:	f000 fa61 	bl	8004e68 <memchr>
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	b9d8      	cbnz	r0, 80049e2 <_svfiprintf_r+0xea>
 80049aa:	06d0      	lsls	r0, r2, #27
 80049ac:	bf44      	itt	mi
 80049ae:	2320      	movmi	r3, #32
 80049b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b4:	0711      	lsls	r1, r2, #28
 80049b6:	bf44      	itt	mi
 80049b8:	232b      	movmi	r3, #43	@ 0x2b
 80049ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049be:	f89a 3000 	ldrb.w	r3, [sl]
 80049c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c4:	d015      	beq.n	80049f2 <_svfiprintf_r+0xfa>
 80049c6:	4654      	mov	r4, sl
 80049c8:	2000      	movs	r0, #0
 80049ca:	f04f 0c0a 	mov.w	ip, #10
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4621      	mov	r1, r4
 80049d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d6:	3b30      	subs	r3, #48	@ 0x30
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d94b      	bls.n	8004a74 <_svfiprintf_r+0x17c>
 80049dc:	b1b0      	cbz	r0, 8004a0c <_svfiprintf_r+0x114>
 80049de:	9207      	str	r2, [sp, #28]
 80049e0:	e014      	b.n	8004a0c <_svfiprintf_r+0x114>
 80049e2:	eba0 0308 	sub.w	r3, r0, r8
 80049e6:	fa09 f303 	lsl.w	r3, r9, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	46a2      	mov	sl, r4
 80049ee:	9304      	str	r3, [sp, #16]
 80049f0:	e7d2      	b.n	8004998 <_svfiprintf_r+0xa0>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9103      	str	r1, [sp, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfbb      	ittet	lt
 80049fe:	425b      	neglt	r3, r3
 8004a00:	f042 0202 	orrlt.w	r2, r2, #2
 8004a04:	9307      	strge	r3, [sp, #28]
 8004a06:	9307      	strlt	r3, [sp, #28]
 8004a08:	bfb8      	it	lt
 8004a0a:	9204      	strlt	r2, [sp, #16]
 8004a0c:	7823      	ldrb	r3, [r4, #0]
 8004a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a10:	d10a      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a12:	7863      	ldrb	r3, [r4, #1]
 8004a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a16:	d132      	bne.n	8004a7e <_svfiprintf_r+0x186>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	3402      	adds	r4, #2
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	9203      	str	r2, [sp, #12]
 8004a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ae0 <_svfiprintf_r+0x1e8>
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4650      	mov	r0, sl
 8004a30:	7821      	ldrb	r1, [r4, #0]
 8004a32:	f000 fa19 	bl	8004e68 <memchr>
 8004a36:	b138      	cbz	r0, 8004a48 <_svfiprintf_r+0x150>
 8004a38:	2240      	movs	r2, #64	@ 0x40
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	eba0 000a 	sub.w	r0, r0, sl
 8004a40:	4082      	lsls	r2, r0
 8004a42:	4313      	orrs	r3, r2
 8004a44:	3401      	adds	r4, #1
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	4825      	ldr	r0, [pc, #148]	@ (8004ae4 <_svfiprintf_r+0x1ec>)
 8004a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a54:	f000 fa08 	bl	8004e68 <memchr>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d036      	beq.n	8004aca <_svfiprintf_r+0x1d2>
 8004a5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004a5e:	bb1b      	cbnz	r3, 8004aa8 <_svfiprintf_r+0x1b0>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	3307      	adds	r3, #7
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	3308      	adds	r3, #8
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	4433      	add	r3, r6
 8004a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a72:	e76a      	b.n	800494a <_svfiprintf_r+0x52>
 8004a74:	460c      	mov	r4, r1
 8004a76:	2001      	movs	r0, #1
 8004a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7c:	e7a8      	b.n	80049d0 <_svfiprintf_r+0xd8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f04f 0c0a 	mov.w	ip, #10
 8004a84:	4619      	mov	r1, r3
 8004a86:	3401      	adds	r4, #1
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a90:	3a30      	subs	r2, #48	@ 0x30
 8004a92:	2a09      	cmp	r2, #9
 8004a94:	d903      	bls.n	8004a9e <_svfiprintf_r+0x1a6>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0c6      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9a:	9105      	str	r1, [sp, #20]
 8004a9c:	e7c4      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa6:	e7f0      	b.n	8004a8a <_svfiprintf_r+0x192>
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462a      	mov	r2, r5
 8004aae:	4638      	mov	r0, r7
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <_svfiprintf_r+0x1f4>)
 8004ab2:	a904      	add	r1, sp, #16
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	1c42      	adds	r2, r0, #1
 8004aba:	4606      	mov	r6, r0
 8004abc:	d1d6      	bne.n	8004a6c <_svfiprintf_r+0x174>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	065b      	lsls	r3, r3, #25
 8004ac2:	f53f af2d 	bmi.w	8004920 <_svfiprintf_r+0x28>
 8004ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac8:	e72c      	b.n	8004924 <_svfiprintf_r+0x2c>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462a      	mov	r2, r5
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <_svfiprintf_r+0x1f4>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	f000 f87d 	bl	8004bd4 <_printf_i>
 8004ada:	e7ed      	b.n	8004ab8 <_svfiprintf_r+0x1c0>
 8004adc:	08004f7e 	.word	0x08004f7e
 8004ae0:	08004f84 	.word	0x08004f84
 8004ae4:	08004f88 	.word	0x08004f88
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	08004841 	.word	0x08004841

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4616      	mov	r6, r2
 8004af6:	4698      	mov	r8, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	4607      	mov	r7, r0
 8004afe:	4293      	cmp	r3, r2
 8004b00:	bfb8      	it	lt
 8004b02:	4613      	movlt	r3, r2
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b10:	b10a      	cbz	r2, 8004b16 <_printf_common+0x26>
 8004b12:	3301      	adds	r3, #1
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	6833      	ldrmi	r3, [r6, #0]
 8004b1e:	3302      	addmi	r3, #2
 8004b20:	6033      	strmi	r3, [r6, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d106      	bne.n	8004b38 <_printf_common+0x48>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc2b      	bgt.n	8004b90 <_printf_common+0xa0>
 8004b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	3b00      	subs	r3, #0
 8004b40:	bf18      	it	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	0692      	lsls	r2, r2, #26
 8004b46:	d430      	bmi.n	8004baa <_printf_common+0xba>
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b50:	47c8      	blx	r9
 8004b52:	3001      	adds	r0, #1
 8004b54:	d023      	beq.n	8004b9e <_printf_common+0xae>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	6922      	ldr	r2, [r4, #16]
 8004b5a:	f003 0306 	and.w	r3, r3, #6
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf14      	ite	ne
 8004b62:	2500      	movne	r5, #0
 8004b64:	6833      	ldreq	r3, [r6, #0]
 8004b66:	f04f 0600 	mov.w	r6, #0
 8004b6a:	bf08      	it	eq
 8004b6c:	68e5      	ldreq	r5, [r4, #12]
 8004b6e:	f104 041a 	add.w	r4, r4, #26
 8004b72:	bf08      	it	eq
 8004b74:	1aed      	subeq	r5, r5, r3
 8004b76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b7a:	bf08      	it	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bfc4      	itt	gt
 8004b84:	1a9b      	subgt	r3, r3, r2
 8004b86:	18ed      	addgt	r5, r5, r3
 8004b88:	42b5      	cmp	r5, r6
 8004b8a:	d11a      	bne.n	8004bc2 <_printf_common+0xd2>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e008      	b.n	8004ba2 <_printf_common+0xb2>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	4641      	mov	r1, r8
 8004b96:	4638      	mov	r0, r7
 8004b98:	47c8      	blx	r9
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <_printf_common+0xb6>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7c1      	b.n	8004b2e <_printf_common+0x3e>
 8004baa:	2030      	movs	r0, #48	@ 0x30
 8004bac:	18e1      	adds	r1, r4, r3
 8004bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb8:	4422      	add	r2, r4
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc0:	e7c2      	b.n	8004b48 <_printf_common+0x58>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c8      	blx	r9
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0e6      	beq.n	8004b9e <_printf_common+0xae>
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7d9      	b.n	8004b88 <_printf_common+0x98>

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	7e0f      	ldrb	r7, [r1, #24]
 8004bda:	4691      	mov	r9, r2
 8004bdc:	2f78      	cmp	r7, #120	@ 0x78
 8004bde:	4680      	mov	r8, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	469a      	mov	sl, r3
 8004be4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	@ 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d3 	beq.w	8004d9c <_printf_i+0x1c8>
 8004bf6:	2f58      	cmp	r7, #88	@ 0x58
 8004bf8:	f000 80ba 	beq.w	8004d70 <_printf_i+0x19c>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c14 <_printf_i+0x40>)
 8004c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d83 	.word	0x08004d83
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004d3d 	.word	0x08004d3d
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004da5 	.word	0x08004da5
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cab 	.word	0x08004cab
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d45 	.word	0x08004d45
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e09e      	b.n	8004dbe <_printf_i+0x1ea>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	0606      	lsls	r6, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xbc>
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <_printf_i+0xc4>
 8004c90:	0645      	lsls	r5, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xb8>
 8004c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xd0>
 8004c9c:	232d      	movs	r3, #45	@ 0x2d
 8004c9e:	426d      	negs	r5, r5
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	230a      	movs	r3, #10
 8004ca6:	4859      	ldr	r0, [pc, #356]	@ (8004e0c <_printf_i+0x238>)
 8004ca8:	e011      	b.n	8004cce <_printf_i+0xfa>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	0608      	lsls	r0, r1, #24
 8004cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb4:	d402      	bmi.n	8004cbc <_printf_i+0xe8>
 8004cb6:	0649      	lsls	r1, r1, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	bf14      	ite	ne
 8004cc2:	230a      	movne	r3, #10
 8004cc4:	2308      	moveq	r3, #8
 8004cc6:	4851      	ldr	r0, [pc, #324]	@ (8004e0c <_printf_i+0x238>)
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	bfa8      	it	ge
 8004cd4:	6821      	ldrge	r1, [r4, #0]
 8004cd6:	60a6      	str	r6, [r4, #8]
 8004cd8:	bfa4      	itt	ge
 8004cda:	f021 0104 	bicge.w	r1, r1, #4
 8004cde:	6021      	strge	r1, [r4, #0]
 8004ce0:	b90d      	cbnz	r5, 8004ce6 <_printf_i+0x112>
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d04b      	beq.n	8004d7e <_printf_i+0x1aa>
 8004ce6:	4616      	mov	r6, r2
 8004ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cec:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf0:	5dc7      	ldrb	r7, [r0, r7]
 8004cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf6:	462f      	mov	r7, r5
 8004cf8:	42bb      	cmp	r3, r7
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	d9f4      	bls.n	8004ce8 <_printf_i+0x114>
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d10b      	bne.n	8004d1a <_printf_i+0x146>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07df      	lsls	r7, r3, #31
 8004d06:	d508      	bpl.n	8004d1a <_printf_i+0x146>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	6861      	ldr	r1, [r4, #4]
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	bfde      	ittt	le
 8004d10:	2330      	movle	r3, #48	@ 0x30
 8004d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d1a:	1b92      	subs	r2, r2, r6
 8004d1c:	6122      	str	r2, [r4, #16]
 8004d1e:	464b      	mov	r3, r9
 8004d20:	4621      	mov	r1, r4
 8004d22:	4640      	mov	r0, r8
 8004d24:	f8cd a000 	str.w	sl, [sp]
 8004d28:	aa03      	add	r2, sp, #12
 8004d2a:	f7ff fee1 	bl	8004af0 <_printf_common>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d14a      	bne.n	8004dc8 <_printf_i+0x1f4>
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	b004      	add	sp, #16
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f043 0320 	orr.w	r3, r3, #32
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	2778      	movs	r7, #120	@ 0x78
 8004d46:	4832      	ldr	r0, [pc, #200]	@ (8004e10 <_printf_i+0x23c>)
 8004d48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	6831      	ldr	r1, [r6, #0]
 8004d50:	061f      	lsls	r7, r3, #24
 8004d52:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d56:	d402      	bmi.n	8004d5e <_printf_i+0x18a>
 8004d58:	065f      	lsls	r7, r3, #25
 8004d5a:	bf48      	it	mi
 8004d5c:	b2ad      	uxthmi	r5, r5
 8004d5e:	6031      	str	r1, [r6, #0]
 8004d60:	07d9      	lsls	r1, r3, #31
 8004d62:	bf44      	itt	mi
 8004d64:	f043 0320 	orrmi.w	r3, r3, #32
 8004d68:	6023      	strmi	r3, [r4, #0]
 8004d6a:	b11d      	cbz	r5, 8004d74 <_printf_i+0x1a0>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	e7ab      	b.n	8004cc8 <_printf_i+0xf4>
 8004d70:	4826      	ldr	r0, [pc, #152]	@ (8004e0c <_printf_i+0x238>)
 8004d72:	e7e9      	b.n	8004d48 <_printf_i+0x174>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f023 0320 	bic.w	r3, r3, #32
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e7f6      	b.n	8004d6c <_printf_i+0x198>
 8004d7e:	4616      	mov	r6, r2
 8004d80:	e7bd      	b.n	8004cfe <_printf_i+0x12a>
 8004d82:	6833      	ldr	r3, [r6, #0]
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	1d18      	adds	r0, r3, #4
 8004d88:	6961      	ldr	r1, [r4, #20]
 8004d8a:	6030      	str	r0, [r6, #0]
 8004d8c:	062e      	lsls	r6, r5, #24
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	d501      	bpl.n	8004d96 <_printf_i+0x1c2>
 8004d92:	6019      	str	r1, [r3, #0]
 8004d94:	e002      	b.n	8004d9c <_printf_i+0x1c8>
 8004d96:	0668      	lsls	r0, r5, #25
 8004d98:	d5fb      	bpl.n	8004d92 <_printf_i+0x1be>
 8004d9a:	8019      	strh	r1, [r3, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4616      	mov	r6, r2
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	e7bc      	b.n	8004d1e <_printf_i+0x14a>
 8004da4:	6833      	ldr	r3, [r6, #0]
 8004da6:	2100      	movs	r1, #0
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	6032      	str	r2, [r6, #0]
 8004dac:	681e      	ldr	r6, [r3, #0]
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	4630      	mov	r0, r6
 8004db2:	f000 f859 	bl	8004e68 <memchr>
 8004db6:	b108      	cbz	r0, 8004dbc <_printf_i+0x1e8>
 8004db8:	1b80      	subs	r0, r0, r6
 8004dba:	6060      	str	r0, [r4, #4]
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc6:	e7aa      	b.n	8004d1e <_printf_i+0x14a>
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4640      	mov	r0, r8
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	47d0      	blx	sl
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d0ad      	beq.n	8004d32 <_printf_i+0x15e>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	079b      	lsls	r3, r3, #30
 8004dda:	d413      	bmi.n	8004e04 <_printf_i+0x230>
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	4298      	cmp	r0, r3
 8004de2:	bfb8      	it	lt
 8004de4:	4618      	movlt	r0, r3
 8004de6:	e7a6      	b.n	8004d36 <_printf_i+0x162>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4632      	mov	r2, r6
 8004dec:	4649      	mov	r1, r9
 8004dee:	4640      	mov	r0, r8
 8004df0:	47d0      	blx	sl
 8004df2:	3001      	adds	r0, #1
 8004df4:	d09d      	beq.n	8004d32 <_printf_i+0x15e>
 8004df6:	3501      	adds	r5, #1
 8004df8:	68e3      	ldr	r3, [r4, #12]
 8004dfa:	9903      	ldr	r1, [sp, #12]
 8004dfc:	1a5b      	subs	r3, r3, r1
 8004dfe:	42ab      	cmp	r3, r5
 8004e00:	dcf2      	bgt.n	8004de8 <_printf_i+0x214>
 8004e02:	e7eb      	b.n	8004ddc <_printf_i+0x208>
 8004e04:	2500      	movs	r5, #0
 8004e06:	f104 0619 	add.w	r6, r4, #25
 8004e0a:	e7f5      	b.n	8004df8 <_printf_i+0x224>
 8004e0c:	08004f8f 	.word	0x08004f8f
 8004e10:	08004fa0 	.word	0x08004fa0

08004e14 <memmove>:
 8004e14:	4288      	cmp	r0, r1
 8004e16:	b510      	push	{r4, lr}
 8004e18:	eb01 0402 	add.w	r4, r1, r2
 8004e1c:	d902      	bls.n	8004e24 <memmove+0x10>
 8004e1e:	4284      	cmp	r4, r0
 8004e20:	4623      	mov	r3, r4
 8004e22:	d807      	bhi.n	8004e34 <memmove+0x20>
 8004e24:	1e43      	subs	r3, r0, #1
 8004e26:	42a1      	cmp	r1, r4
 8004e28:	d008      	beq.n	8004e3c <memmove+0x28>
 8004e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e32:	e7f8      	b.n	8004e26 <memmove+0x12>
 8004e34:	4601      	mov	r1, r0
 8004e36:	4402      	add	r2, r0
 8004e38:	428a      	cmp	r2, r1
 8004e3a:	d100      	bne.n	8004e3e <memmove+0x2a>
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e46:	e7f7      	b.n	8004e38 <memmove+0x24>

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4d05      	ldr	r5, [pc, #20]	@ (8004e64 <_sbrk_r+0x1c>)
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc fcdc 	bl	8001810 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200003fc 	.word	0x200003fc

08004e68 <memchr>:
 8004e68:	4603      	mov	r3, r0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	b2c9      	uxtb	r1, r1
 8004e6e:	4402      	add	r2, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	d101      	bne.n	8004e7a <memchr+0x12>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e003      	b.n	8004e82 <memchr+0x1a>
 8004e7a:	7804      	ldrb	r4, [r0, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	428c      	cmp	r4, r1
 8004e80:	d1f6      	bne.n	8004e70 <memchr+0x8>
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <memcpy>:
 8004e84:	440a      	add	r2, r1
 8004e86:	4291      	cmp	r1, r2
 8004e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e8c:	d100      	bne.n	8004e90 <memcpy+0xc>
 8004e8e:	4770      	bx	lr
 8004e90:	b510      	push	{r4, lr}
 8004e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e9c:	d1f9      	bne.n	8004e92 <memcpy+0xe>
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <_realloc_r>:
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	4615      	mov	r5, r2
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	b921      	cbnz	r1, 8004eb6 <_realloc_r+0x16>
 8004eac:	4611      	mov	r1, r2
 8004eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb2:	f7ff bc39 	b.w	8004728 <_malloc_r>
 8004eb6:	b92a      	cbnz	r2, 8004ec4 <_realloc_r+0x24>
 8004eb8:	f7ff fbcc 	bl	8004654 <_free_r>
 8004ebc:	2400      	movs	r4, #0
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec4:	f000 f81a 	bl	8004efc <_malloc_usable_size_r>
 8004ec8:	4285      	cmp	r5, r0
 8004eca:	4606      	mov	r6, r0
 8004ecc:	d802      	bhi.n	8004ed4 <_realloc_r+0x34>
 8004ece:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ed2:	d8f4      	bhi.n	8004ebe <_realloc_r+0x1e>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fc26 	bl	8004728 <_malloc_r>
 8004edc:	4607      	mov	r7, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0ec      	beq.n	8004ebc <_realloc_r+0x1c>
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	bf28      	it	cs
 8004eea:	4632      	movcs	r2, r6
 8004eec:	f7ff ffca 	bl	8004e84 <memcpy>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7ff fbae 	bl	8004654 <_free_r>
 8004ef8:	463c      	mov	r4, r7
 8004efa:	e7e0      	b.n	8004ebe <_realloc_r+0x1e>

08004efc <_malloc_usable_size_r>:
 8004efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f00:	1f18      	subs	r0, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfbc      	itt	lt
 8004f06:	580b      	ldrlt	r3, [r1, r0]
 8004f08:	18c0      	addlt	r0, r0, r3
 8004f0a:	4770      	bx	lr

08004f0c <_init>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr

08004f18 <_fini>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr
